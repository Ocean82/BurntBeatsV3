export declare const sessions: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "sessions";
    schema: undefined;
    columns: {
        sid: import("drizzle-orm/pg-core").PgColumn<{
            name: "sid";
            tableName: "sessions";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        sess: import("drizzle-orm/pg-core").PgColumn<{
            name: "sess";
            tableName: "sessions";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        expire: import("drizzle-orm/pg-core").PgColumn<{
            name: "expire";
            tableName: "sessions";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const users: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "users";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "users";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        email: import("drizzle-orm/pg-core").PgColumn<{
            name: "email";
            tableName: "users";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        firstName: import("drizzle-orm/pg-core").PgColumn<{
            name: "first_name";
            tableName: "users";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        lastName: import("drizzle-orm/pg-core").PgColumn<{
            name: "last_name";
            tableName: "users";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        profileImageUrl: import("drizzle-orm/pg-core").PgColumn<{
            name: "profile_image_url";
            tableName: "users";
            dataType: "string";
            columnType: "PgVarchar";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {
            length: number | undefined;
        }>;
        username: import("drizzle-orm/pg-core").PgColumn<{
            name: "username";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        password: import("drizzle-orm/pg-core").PgColumn<{
            name: "password";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        passwordResetToken: import("drizzle-orm/pg-core").PgColumn<{
            name: "password_reset_token";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        passwordResetExpires: import("drizzle-orm/pg-core").PgColumn<{
            name: "password_reset_expires";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        plan: import("drizzle-orm/pg-core").PgColumn<{
            name: "plan";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        songsGenerated: import("drizzle-orm/pg-core").PgColumn<{
            name: "songs_generated";
            tableName: "users";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        maxSongs: import("drizzle-orm/pg-core").PgColumn<{
            name: "max_songs";
            tableName: "users";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        songsThisMonth: import("drizzle-orm/pg-core").PgColumn<{
            name: "songs_this_month";
            tableName: "users";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        lastUsageReset: import("drizzle-orm/pg-core").PgColumn<{
            name: "last_usage_reset";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        stripeCustomerId: import("drizzle-orm/pg-core").PgColumn<{
            name: "stripe_customer_id";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        subscriptionId: import("drizzle-orm/pg-core").PgColumn<{
            name: "subscription_id";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        subscriptionStatus: import("drizzle-orm/pg-core").PgColumn<{
            name: "subscription_status";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        agreementAccepted: import("drizzle-orm/pg-core").PgColumn<{
            name: "agreement_accepted";
            tableName: "users";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        agreementAcceptedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "agreement_accepted_at";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        updatedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "updated_at";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const songs: any;
export declare const voiceSamples: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "voice_samples";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "voice_samples";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "voice_samples";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        name: import("drizzle-orm/pg-core").PgColumn<{
            name: "name";
            tableName: "voice_samples";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        filePath: import("drizzle-orm/pg-core").PgColumn<{
            name: "file_path";
            tableName: "voice_samples";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        duration: import("drizzle-orm/pg-core").PgColumn<{
            name: "duration";
            tableName: "voice_samples";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        format: import("drizzle-orm/pg-core").PgColumn<{
            name: "format";
            tableName: "voice_samples";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isDeleted: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_deleted";
            tableName: "voice_samples";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "voice_samples";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        deletedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "deleted_at";
            tableName: "voice_samples";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const voiceClones: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "voice_clones";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "voice_clones";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "voice_clones";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        name: import("drizzle-orm/pg-core").PgColumn<{
            name: "name";
            tableName: "voice_clones";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        originalVoiceId: import("drizzle-orm/pg-core").PgColumn<{
            name: "original_voice_id";
            tableName: "voice_clones";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        clonedVoicePath: import("drizzle-orm/pg-core").PgColumn<{
            name: "cloned_voice_path";
            tableName: "voice_clones";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "voice_clones";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        quality: import("drizzle-orm/pg-core").PgColumn<{
            name: "quality";
            tableName: "voice_clones";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isDeleted: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_deleted";
            tableName: "voice_clones";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "voice_clones";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        deletedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "deleted_at";
            tableName: "voice_clones";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const songVersions: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "song_versions";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "song_versions";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        songId: import("drizzle-orm/pg-core").PgColumn<{
            name: "song_id";
            tableName: "song_versions";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        version: import("drizzle-orm/pg-core").PgColumn<{
            name: "version";
            tableName: "song_versions";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        changes: import("drizzle-orm/pg-core").PgColumn<{
            name: "changes";
            tableName: "song_versions";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        audioPath: import("drizzle-orm/pg-core").PgColumn<{
            name: "audio_path";
            tableName: "song_versions";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isDeleted: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_deleted";
            tableName: "song_versions";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "song_versions";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        deletedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "deleted_at";
            tableName: "song_versions";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const licenseAcknowledgments: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "license_acknowledgments";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "license_acknowledgments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: true;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "license_acknowledgments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        trackId: import("drizzle-orm/pg-core").PgColumn<{
            name: "track_id";
            tableName: "license_acknowledgments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        acceptedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "accepted_at";
            tableName: "license_acknowledgments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        purchaseId: import("drizzle-orm/pg-core").PgColumn<{
            name: "purchase_id";
            tableName: "license_acknowledgments";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "license_acknowledgments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        updatedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "updated_at";
            tableName: "license_acknowledgments";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const userAgreementRecords: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "user_agreement_records";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: true;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        username: import("drizzle-orm/pg-core").PgColumn<{
            name: "username";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        email: import("drizzle-orm/pg-core").PgColumn<{
            name: "email";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        acceptedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "accepted_at";
            tableName: "user_agreement_records";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        ipAddress: import("drizzle-orm/pg-core").PgColumn<{
            name: "ip_address";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userAgent: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_agent";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        compressedRecord: import("drizzle-orm/pg-core").PgColumn<{
            name: "compressed_record";
            tableName: "user_agreement_records";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "user_agreement_records";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const userRelations: import("drizzle-orm").Relations<"users", {
    songs: import("drizzle-orm").Many<any>;
    voiceSamples: import("drizzle-orm").Many<"voice_samples">;
    voiceClones: import("drizzle-orm").Many<"voice_clones">;
}>;
export declare const songRelations: import("drizzle-orm").Relations<string, {
    user: import("drizzle-orm").One<"users", false>;
    voiceSample: import("drizzle-orm").One<"voice_samples", false>;
    parentSong: import("drizzle-orm").One<any, false>;
    forkedFrom: import("drizzle-orm").One<any, false>;
    versions: import("drizzle-orm").Many<"song_versions">;
}>;
export declare const voiceSampleRelations: import("drizzle-orm").Relations<"voice_samples", {
    user: import("drizzle-orm").One<"users", true>;
    songs: import("drizzle-orm").Many<any>;
    voiceClones: import("drizzle-orm").Many<"voice_clones">;
}>;
export declare const voiceCloneRelations: import("drizzle-orm").Relations<"voice_clones", {
    user: import("drizzle-orm").One<"users", true>;
    originalVoice: import("drizzle-orm").One<"voice_samples", false>;
}>;
export declare const songVersionRelations: import("drizzle-orm").Relations<"song_versions", {
    song: import("drizzle-orm").One<any, true>;
}>;
export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;
export type Song = typeof songs.$inferSelect;
export type NewSong = typeof songs.$inferInsert;
export type VoiceSample = typeof voiceSamples.$inferSelect;
export type NewVoiceSample = typeof voiceSamples.$inferInsert;
export type VoiceClone = typeof voiceClones.$inferSelect;
export type NewVoiceClone = typeof voiceClones.$inferInsert;
export type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;
export type LicenseAcknowledgment = typeof licenseAcknowledgments.$inferSelect;
export type NewLicenseAcknowledgment = typeof licenseAcknowledgments.$inferInsert;
import { z } from 'zod';
export declare const UserSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    username: z.ZodString;
    subscription_tier: z.ZodDefault<z.ZodEnum<["free", "premium", "pro"]>>;
    monthly_songs_generated: z.ZodDefault<z.ZodNumber>;
    monthly_limit: z.ZodDefault<z.ZodNumber>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    email: string;
    username: string;
    created_at: Date;
    updated_at: Date;
    subscription_tier: "free" | "premium" | "pro";
    monthly_songs_generated: number;
    monthly_limit: number;
}, {
    id: string;
    email: string;
    username: string;
    created_at: Date;
    updated_at: Date;
    subscription_tier?: "free" | "premium" | "pro" | undefined;
    monthly_songs_generated?: number | undefined;
    monthly_limit?: number | undefined;
}>;
export declare const CreateUserSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    email: z.ZodString;
    username: z.ZodString;
    subscription_tier: z.ZodDefault<z.ZodEnum<["free", "premium", "pro"]>>;
    monthly_songs_generated: z.ZodDefault<z.ZodNumber>;
    monthly_limit: z.ZodDefault<z.ZodNumber>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "id" | "created_at" | "updated_at">, "strip", z.ZodTypeAny, {
    email: string;
    username: string;
    subscription_tier: "free" | "premium" | "pro";
    monthly_songs_generated: number;
    monthly_limit: number;
}, {
    email: string;
    username: string;
    subscription_tier?: "free" | "premium" | "pro" | undefined;
    monthly_songs_generated?: number | undefined;
    monthly_limit?: number | undefined;
}>;
export declare const UpdateUserSchema: z.ZodObject<{
    email: z.ZodOptional<z.ZodString>;
    username: z.ZodOptional<z.ZodString>;
    subscription_tier: z.ZodOptional<z.ZodDefault<z.ZodEnum<["free", "premium", "pro"]>>>;
    monthly_songs_generated: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    monthly_limit: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    email?: string | undefined;
    username?: string | undefined;
    subscription_tier?: "free" | "premium" | "pro" | undefined;
    monthly_songs_generated?: number | undefined;
    monthly_limit?: number | undefined;
}, {
    email?: string | undefined;
    username?: string | undefined;
    subscription_tier?: "free" | "premium" | "pro" | undefined;
    monthly_songs_generated?: number | undefined;
    monthly_limit?: number | undefined;
}>;
export declare const SongSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    title: z.ZodString;
    lyrics: z.ZodOptional<z.ZodString>;
    genre: z.ZodString;
    mood: z.ZodOptional<z.ZodString>;
    style_reference: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["generating", "completed", "failed"]>>;
    file_path: z.ZodOptional<z.ZodString>;
    duration: z.ZodOptional<z.ZodNumber>;
    file_size: z.ZodOptional<z.ZodNumber>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    created_at: Date;
    updated_at: Date;
    title: string;
    user_id: string;
    status: "generating" | "completed" | "failed";
    genre: string;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}, {
    id: string;
    created_at: Date;
    updated_at: Date;
    title: string;
    user_id: string;
    genre: string;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    status?: "generating" | "completed" | "failed" | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}>;
export declare const CreateSongSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    user_id: z.ZodString;
    title: z.ZodString;
    lyrics: z.ZodOptional<z.ZodString>;
    genre: z.ZodString;
    mood: z.ZodOptional<z.ZodString>;
    style_reference: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<["generating", "completed", "failed"]>>;
    file_path: z.ZodOptional<z.ZodString>;
    duration: z.ZodOptional<z.ZodNumber>;
    file_size: z.ZodOptional<z.ZodNumber>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "id" | "created_at" | "updated_at">, "strip", z.ZodTypeAny, {
    title: string;
    user_id: string;
    status: "generating" | "completed" | "failed";
    genre: string;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}, {
    title: string;
    user_id: string;
    genre: string;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    status?: "generating" | "completed" | "failed" | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}>;
export declare const UpdateSongSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    lyrics: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    mood: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    file_path: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    duration: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["generating", "completed", "failed"]>>>;
    genre: z.ZodOptional<z.ZodString>;
    style_reference: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    file_size: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    title?: string | undefined;
    user_id?: string | undefined;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    status?: "generating" | "completed" | "failed" | undefined;
    genre?: string | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}, {
    title?: string | undefined;
    user_id?: string | undefined;
    lyrics?: string | undefined;
    mood?: string | undefined;
    file_path?: string | undefined;
    duration?: number | undefined;
    status?: "generating" | "completed" | "failed" | undefined;
    genre?: string | undefined;
    style_reference?: string | undefined;
    file_size?: number | undefined;
}>;
export declare const VoiceSampleSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    name: z.ZodString;
    file_path: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["processing", "ready", "failed"]>>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    created_at: Date;
    updated_at: Date;
    user_id: string;
    file_path: string;
    status: "failed" | "processing" | "ready";
    metadata?: Record<string, any> | undefined;
}, {
    name: string;
    id: string;
    created_at: Date;
    updated_at: Date;
    user_id: string;
    file_path: string;
    metadata?: Record<string, any> | undefined;
    status?: "failed" | "processing" | "ready" | undefined;
}>;
export declare const CreateVoiceSampleSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    user_id: z.ZodString;
    name: z.ZodString;
    file_path: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["processing", "ready", "failed"]>>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "id" | "created_at" | "updated_at">, "strip", z.ZodTypeAny, {
    name: string;
    user_id: string;
    file_path: string;
    status: "failed" | "processing" | "ready";
    metadata?: Record<string, any> | undefined;
}, {
    name: string;
    user_id: string;
    file_path: string;
    metadata?: Record<string, any> | undefined;
    status?: "failed" | "processing" | "ready" | undefined;
}>;
export declare const UpdateVoiceSampleSchema: z.ZodObject<{
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    name: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    file_path: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["processing", "ready", "failed"]>>>;
}, "strip", z.ZodTypeAny, {
    metadata?: Record<string, any> | undefined;
    name?: string | undefined;
    user_id?: string | undefined;
    file_path?: string | undefined;
    status?: "failed" | "processing" | "ready" | undefined;
}, {
    metadata?: Record<string, any> | undefined;
    name?: string | undefined;
    user_id?: string | undefined;
    file_path?: string | undefined;
    status?: "failed" | "processing" | "ready" | undefined;
}>;
export declare const VoiceCloneSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    name: z.ZodString;
    voice_sample_id: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["training", "ready", "failed"]>>;
    model_path: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    created_at: Date;
    updated_at: Date;
    user_id: string;
    voice_sample_id: string;
    status: "failed" | "ready" | "training";
    metadata?: Record<string, any> | undefined;
    model_path?: string | undefined;
}, {
    name: string;
    id: string;
    created_at: Date;
    updated_at: Date;
    user_id: string;
    voice_sample_id: string;
    metadata?: Record<string, any> | undefined;
    status?: "failed" | "ready" | "training" | undefined;
    model_path?: string | undefined;
}>;
export declare const CreateVoiceCloneSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    user_id: z.ZodString;
    name: z.ZodString;
    voice_sample_id: z.ZodString;
    status: z.ZodDefault<z.ZodEnum<["training", "ready", "failed"]>>;
    model_path: z.ZodOptional<z.ZodString>;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    created_at: z.ZodDate;
    updated_at: z.ZodDate;
}, "id" | "created_at" | "updated_at">, "strip", z.ZodTypeAny, {
    name: string;
    user_id: string;
    voice_sample_id: string;
    status: "failed" | "ready" | "training";
    metadata?: Record<string, any> | undefined;
    model_path?: string | undefined;
}, {
    name: string;
    user_id: string;
    voice_sample_id: string;
    metadata?: Record<string, any> | undefined;
    status?: "failed" | "ready" | "training" | undefined;
    model_path?: string | undefined;
}>;
export declare const UpdateVoiceCloneSchema: z.ZodObject<{
    metadata: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    name: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    voice_sample_id: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodDefault<z.ZodEnum<["training", "ready", "failed"]>>>;
    model_path: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    metadata?: Record<string, any> | undefined;
    name?: string | undefined;
    user_id?: string | undefined;
    voice_sample_id?: string | undefined;
    status?: "failed" | "ready" | "training" | undefined;
    model_path?: string | undefined;
}, {
    metadata?: Record<string, any> | undefined;
    name?: string | undefined;
    user_id?: string | undefined;
    voice_sample_id?: string | undefined;
    status?: "failed" | "ready" | "training" | undefined;
    model_path?: string | undefined;
}>;
export declare const LicenseAcknowledgmentSchema: z.ZodObject<{
    id: z.ZodString;
    song_id: z.ZodString;
    user_id: z.ZodString;
    license_type: z.ZodString;
    acknowledgment_text: z.ZodString;
    created_at: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    created_at: Date;
    user_id: string;
    song_id: string;
    license_type: string;
    acknowledgment_text: string;
}, {
    id: string;
    created_at: Date;
    user_id: string;
    song_id: string;
    license_type: string;
    acknowledgment_text: string;
}>;
export declare const CreateLicenseAcknowledgmentSchema: z.ZodObject<Omit<{
    id: z.ZodString;
    song_id: z.ZodString;
    user_id: z.ZodString;
    license_type: z.ZodString;
    acknowledgment_text: z.ZodString;
    created_at: z.ZodDate;
}, "id" | "created_at">, "strip", z.ZodTypeAny, {
    user_id: string;
    song_id: string;
    license_type: string;
    acknowledgment_text: string;
}, {
    user_id: string;
    song_id: string;
    license_type: string;
    acknowledgment_text: string;
}>;
export declare const ApiResponseSchema: z.ZodObject<{
    success: z.ZodBoolean;
    message: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodAny>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    success: boolean;
    data?: any;
    error?: string | undefined;
    message?: string | undefined;
}, {
    success: boolean;
    data?: any;
    error?: string | undefined;
    message?: string | undefined;
}>;
export declare const PaginationSchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodOptional<z.ZodNumber>;
    totalPages: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    page: number;
    limit: number;
    total?: number | undefined;
    totalPages?: number | undefined;
}, {
    page?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
    totalPages?: number | undefined;
}>;
export type UserValidation = z.infer<typeof UserSchema>;
export type NewUserValidation = z.infer<typeof CreateUserSchema>;
export type SongValidation = z.infer<typeof SongSchema>;
export type NewSongValidation = z.infer<typeof CreateSongSchema>;
export type VoiceSampleValidation = z.infer<typeof VoiceSampleSchema>;
export type NewVoiceSampleValidation = z.infer<typeof CreateVoiceSampleSchema>;
export type VoiceCloneValidation = z.infer<typeof VoiceCloneSchema>;
export type NewVoiceCloneValidation = z.infer<typeof CreateVoiceCloneSchema>;
export type LicenseAcknowledgmentValidation = z.infer<typeof LicenseAcknowledgmentSchema>;
export type ApiResponse = z.infer<typeof ApiResponseSchema>;
export type Pagination = z.infer<typeof PaginationSchema>;
