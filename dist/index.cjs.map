{
  "version": 3,
  "sources": ["../server/index.ts", "../server/midi-service.ts", "../server/routes/voice.ts", "../server/routes/midi.ts", "../server/routes/audioldm2.ts", "../server/audioldm2-service.ts"],
  "sourcesContent": ["import express from 'express';\nimport cors from 'cors';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport dotenv from 'dotenv';\nimport Stripe from 'stripe';\nimport { dirname, join } from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\nimport { MidiService } from './midi-service';\n\n// CORE INITIALIZATION SECTION\n// NOTE: This section handles environment setup and service initialization\n// TODO: Consider moving service initialization to a separate bootstrap file\ndotenv.config();\n\n// ES6 Module path helpers - required for __dirname in ES6\n// CommonJS compatibility fix for build\nconst __filename = typeof import.meta !== 'undefined' && import.meta.url ? fileURLToPath(import.meta.url) : __filename;\nconst __dirname = typeof import.meta !== 'undefined' && import.meta.url ? path.dirname(__filename) : __dirname;\n\n// PAYMENT PROCESSING SETUP\n// NOTE: Stripe initialization - ensure API version matches production requirements\n// TODO: Add error handling for missing Stripe keys in production\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-06-20', // IMPORTANT: Keep this version synchronized with Stripe dashboard\n});\n\n// EXPRESS APP CONFIGURATION\nconst app = express();\nconst PORT = process.env.PORT || 5000; // NOTE: 5000 is Replit's recommended port for web apps\n\n// SERVICE INSTANCES\n// NOTE: Initialize core services - consider dependency injection pattern for scalability\nconst midiService = new MidiService(); // MIDI generation and processing service\n\n// MIDDLEWARE CONFIGURATION\n// NOTE: Middleware order is crucial - authentication should come before routes\napp.use(cors()); // TODO: Configure CORS origins for production security\napp.use(express.json({ limit: '50mb' })); // NOTE: Large limit for audio file uploads\napp.use(express.urlencoded({ extended: true, limit: '50mb' })); // NOTE: Support for file uploads\n\n// STATIC FILE SERVING\n// NOTE: Serves built client files from dist/public directory\n// TODO: Add cache headers for static assets in production\napp.use(express.static(path.join(__dirname, '../dist/public')));\n\n// HEALTH CHECK ENDPOINT\n// NOTE: Essential for monitoring and deployment health verification\n// TODO: Enhance with detailed service status checks\napp.get('/api/health', async (req, res) => {\n  try {\n    // Simple health check without database dependency for now\n    res.json({ \n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      services: {\n        server: true,\n        database: true, // TODO: Add actual database health check\n        stripe: !!process.env.STRIPE_SECRET_KEY,\n        audioldm2: true\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// API endpoints\napp.get('/api/status', (req, res) => {\n  res.json({ \n    message: 'Burnt Beats API is running',\n    version: '1.0.0',\n    environment: process.env.NODE_ENV || 'development'\n  });\n});\n\n// STRIPE PAYMENT INTEGRATION\n// NOTE: These endpoints handle payment processing and configuration\n// TODO: Add rate limiting and authentication for payment endpoints\n\n// Stripe Configuration Endpoint\n// NOTE: Provides client-side Stripe configuration\n// SECURITY: Only exposes publishable key (safe for client-side)\napp.get('/api/stripe/config', (req, res) => {\n  res.json({\n    publishableKey: process.env.STRIPE_PUBLISHABLE_KEY,\n    success: true\n  });\n});\n\n// Create Payment Intent\n// NOTE: Server-side payment intent creation for secure processing\n// TODO: Add payment validation and fraud detection\napp.post('/api/stripe/create-payment-intent', async (req, res) => {\n  try {\n    const { amount, currency = 'usd', userId, planType } = req.body;\n\n    if (!amount || !userId) {\n      return res.status(400).json({ error: 'Amount and userId are required' });\n    }\n\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount), // Amount in cents\n      currency,\n      metadata: {\n        userId,\n        planType: planType || 'standard'\n      },\n      automatic_payment_methods: {\n        enabled: true,\n      },\n    });\n\n    res.json({\n      clientSecret: paymentIntent.client_secret,\n      success: true\n    });\n  } catch (error) {\n    console.error('Payment intent creation failed:', error);\n    res.status(500).json({ \n      error: 'Payment processing failed',\n      message: error.message \n    });\n  }\n});\n\n// Stripe Webhook Handler\napp.post('/webhook/stripe', express.raw({ type: 'application/json' }), (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  let event;\n\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err.message);\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  // Handle the event\n  switch (event.type) {\n    case 'payment_intent.succeeded':\n      const paymentIntent = event.data.object;\n      console.log('Payment succeeded:', paymentIntent.id);\n      // Handle successful payment (upgrade user plan, etc.)\n      break;\n    case 'payment_intent.payment_failed':\n      console.log('Payment failed:', event.data.object.id);\n      // Handle failed payment\n      break;\n    default:\n      console.log(`Unhandled event type: ${event.type}`);\n  }\n\n  res.json({ received: true });\n});\n\n// Get pricing plans\napp.get('/api/stripe/plans', (req, res) => {\n  res.json({\n    plans: [\n      {\n        id: 'basic',\n        name: 'Basic Plan',\n        price: 299, // $2.99 in cents\n        songs: 10,\n        features: ['Basic AI generation', 'Standard quality']\n      },\n      {\n        id: 'pro',\n        name: 'Pro Plan', \n        price: 499, // $4.99 in cents\n        songs: 50,\n        features: ['Advanced AI', 'High quality', 'Voice cloning']\n      },\n      {\n        id: 'premium',\n        name: 'Premium Plan',\n        price: 999, // $9.99 in cents\n        songs: 'unlimited',\n        features: ['All features', 'Priority support', 'Commercial license']\n      }\n    ]\n  });\n});\n\n// Catch-all handler for React app\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../dist/public', 'index.html'));\n});\n\n// Error handling middleware\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error('Server error:', err);\n  res.status(500).json({ \n    error: 'Internal server error',\n    message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n  });\n});\n\n// MIDI GENERATION ENDPOINTS\n// NOTE: These endpoints handle MIDI file generation and management\n// TODO: Add authentication middleware for user-specific MIDI generation\n\n// Generate MIDI File\n// NOTE: Primary endpoint for MIDI generation from user parameters\n// TODO: Add input validation schema and rate limiting\napp.post('/api/generate-midi', async (req, res) => {\n  try {\n    const { title, theme, genre, tempo, duration, useAiLyrics } = req.body;\n\n    // INPUT VALIDATION\n    // NOTE: Basic validation - consider using a validation library like Joi\n    if (!title || !theme || !genre || !tempo) {\n      return res.status(400).json({ \n        error: 'Missing required fields: title, theme, genre, tempo' \n      });\n    }\n\n    // MIDI GENERATION SERVICE CALL\n    // NOTE: Delegates to MidiService for actual generation logic\n    const result = await midiService.generateMidi({\n      title,\n      theme,\n      genre,\n      tempo: parseInt(tempo),\n      duration: duration ? parseInt(duration) : undefined,\n      useAiLyrics: Boolean(useAiLyrics)\n    });\n\n    if (result.success) {\n      res.json({\n        success: true,\n        midiPath: result.midiPath,\n        metadataPath: result.metadataPath,\n        message: 'MIDI generated successfully'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({ \n      error: `MIDI generation failed: ${error}` \n    });\n  }\n});\n\napp.get('/api/midi/list', async (req, res) => {\n  try {\n    const midiFiles = await midiService.listGeneratedMidi();\n    res.json({ files: midiFiles });\n  } catch (error) {\n    res.status(500).json({ error: `Failed to list MIDI files: ${error}` });\n  }\n});\n\napp.get('/api/midi/:filename/metadata', async (req, res) => {\n  try {\n    const filename = req.params.filename;\n    const midiPath = join('./storage/midi/generated', filename);\n    const metadata = await midiService.getMidiMetadata(midiPath);\n\n    if (metadata) {\n      res.json(metadata);\n    } else {\n      res.status(404).json({ error: 'Metadata not found' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: `Failed to get metadata: ${error}` });\n  }\n});\n\n// VOICE CLONING ENDPOINTS\n// NOTE: These endpoints handle voice cloning and synthesis\n// TODO: Implement actual RVC integration and add authentication\n\n// Voice Cloning Endpoint\n// NOTE: Currently mock implementation - needs RVC service integration\n// TODO: Add file upload handling and voice model training\napp.post('/api/voice/clone', async (req, res) => {\n  try {\n    const { audioPath, text, voiceId } = req.body;\n\n    // INPUT VALIDATION\n    if (!audioPath || !text) {\n      return res.status(400).json({ \n        error: 'Audio path and text are required for voice cloning' \n      });\n    }\n\n    // MOCK RVC INTEGRATION\n    // TODO: Replace with actual RVC service call\n    // NOTE: This is a placeholder for RVC voice cloning functionality\n    const result = {\n      success: true,\n      voiceId: `rvc_${Date.now()}`,\n      audioUrl: `/storage/voices/cloned_${Date.now()}.wav`,\n      message: 'Voice cloned successfully (mock mode)'\n    };\n\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ \n      error: `Voice cloning failed: ${error}` \n    });\n  }\n});\n\napp.post('/api/voice/synthesize', async (req, res) => {\n  try {\n    const { text, voiceId, midiPath } = req.body;\n\n    if (!text || !voiceId) {\n      return res.status(400).json({ \n        error: 'Text and voice ID are required for synthesis' \n      });\n    }\n\n    // Mock voice synthesis with MIDI integration\n    const result = {\n      success: true,\n      audioUrl: `/storage/voices/synthesized_${Date.now()}.wav`,\n      midiIntegration: midiPath ? true : false,\n      message: 'Voice synthesized successfully'\n    };\n\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ \n      error: `Voice synthesis failed: ${error}` \n    });\n  }\n});\n\n// MIDDLEWARE SETUP\n// NOTE: Order matters for middleware - body parsing before routes\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' ? \n    ['https://burntbeats.replit.app', 'https://burnt-beats.replit.app'] : \n    ['http://localhost:3000', 'http://localhost:5000'],\n  credentials: true\n}));\n\n// Serve MIDI files from storage\napp.use('/storage', express.static(path.join(__dirname, '../storage')));\n\n// STATIC FILE SERVING FOR GENERATED CONTENT\n// NOTE: Serves generated files directly from storage directories\n// TODO: Add authentication and access control for user-specific files\napp.use('/midi', express.static('./storage/midi/generated')); // MIDI files\napp.use('/storage/voices', express.static('./storage/voices')); // Voice samples\napp.use('/storage/music', express.static('./storage/music')); // Generated music\napp.use('/storage/temp', express.static('./storage/temp')); // Temporary files\n\n// MODULAR ROUTE IMPORTS\n// NOTE: Separates route logic into dedicated modules for maintainability\n// TODO: Consider adding route-specific middleware and validation\nimport voiceRoutes from './routes/voice.js';\nimport midiRoutes from './routes/midi.js';\nimport audioldm2Routes from './routes/audioldm2.js';\n\n// ROUTE REGISTRATION\n// NOTE: Mounts route modules under specific API paths\napp.use('/api/voice', voiceRoutes);   // Voice cloning and synthesis\napp.use('/api/midi', midiRoutes);     // MIDI generation and management\napp.use('/api/audioldm2', audioldm2Routes); // AI music generation\n\n// Start server\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`\uD83D\uDD25 Burnt Beats server running on http://0.0.0.0:${PORT}`);\n  console.log(`\uD83C\uDFB5 MIDI generation available`);\n  console.log(`\uD83D\uDDE3\uFE0F  Voice cloning available (mock mode)`);\n  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n});\n\nexport default app;", "\nimport { spawn } from 'child_process';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// TYPE DEFINITIONS\n// NOTE: These interfaces define the contract for MIDI generation\n// TODO: Add validation decorators or runtime type checking\n\nexport interface MidiGenerationRequest {\n  title: string;           // Song title\n  theme: string;          // Musical theme/mood\n  genre: string;          // Music genre\n  tempo: number;          // BPM (beats per minute)\n  duration?: number;      // Optional duration in seconds\n  useAiLyrics?: boolean;  // Whether to generate AI lyrics\n  voiceId?: string;       // Optional voice ID for synthesis\n  generateVoice?: boolean; // Whether to generate voice track\n}\n\nexport interface MidiGenerationResult {\n  success: boolean;        // Operation success status\n  midiPath?: string;      // Path to generated MIDI file\n  metadataPath?: string;  // Path to metadata file\n  error?: string;         // Error message if failed\n}\n\n// MIDI SERVICE CLASS\n// NOTE: Handles all MIDI generation and template management\n// TODO: Add caching mechanism for frequently used templates\nexport class MidiService {\n  // SERVICE CONFIGURATION\n  // NOTE: These paths are configurable for different environments\n  private pythonPath = 'python3';                    // Python executable\n  private generatorScript = './music Gen extra/Main.py'; // Main generator script\n  private outputDir = './storage/midi/generated';    // Output directory\n  private templatesDir = './storage/midi/templates'; // Template directory\n\n  // MAIN MIDI GENERATION METHOD\n  // NOTE: Orchestrates the entire MIDI generation process\n  // TODO: Add progress tracking and cancellation support\n  async generateMidi(request: MidiGenerationRequest): Promise<MidiGenerationResult> {\n    try {\n      // DIRECTORY PREPARATION\n      // NOTE: Ensures output directory exists before generation\n      await fs.mkdir(this.outputDir, { recursive: true });\n\n      // FILENAME GENERATION\n      // NOTE: Creates unique filename with timestamp to prevent conflicts\n      const timestamp = Date.now();\n      const sanitizedTitle = request.title.replace(/[^a-zA-Z0-9]/g, '_'); // Remove special chars\n      const outputPath = path.join(this.outputDir, `${sanitizedTitle}_${timestamp}.mid`);\n\n      // PYTHON SCRIPT ARGUMENTS\n      // NOTE: Builds argument array for Python script execution\n      // TODO: Add validation for script path existence\n      const enhancedArgs = [\n        './server/enhanced-midi-generator.py', // Enhanced generator script\n        '--title', request.title,\n        '--theme', request.theme,\n        '--genre', request.genre,\n        '--tempo', request.tempo.toString(),\n        '--output', outputPath\n      ];\n\n      if (request.useAiLyrics) {\n        enhancedArgs.push('--ai-lyrics');\n      }\n\n      if (request.duration) {\n        enhancedArgs.push('--duration', request.duration.toString());\n      }\n\n      if (request.voiceId) {\n        enhancedArgs.push('--voice-id', request.voiceId);\n      }\n\n      // Execute enhanced Python script with chords2midi\n      const result = await this.executePythonScript(enhancedArgs);\n      \n      if (result.success) {\n        // Check if files were created\n        const midiExists = await this.fileExists(outputPath);\n        const metadataPath = outputPath.replace('.mid', '_metadata.json');\n        const metadataExists = await this.fileExists(metadataPath);\n\n        return {\n          success: midiExists,\n          midiPath: midiExists ? outputPath : undefined,\n          metadataPath: metadataExists ? metadataPath : undefined,\n          error: midiExists ? undefined : 'MIDI file was not generated'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `MIDI generation failed: ${error}`\n      };\n    }\n  }\n\n  private async executePythonScript(args: string[]): Promise<{ success: boolean; error?: string }> {\n    return new Promise((resolve) => {\n      const childProcess = spawn(this.pythonPath, args);\n      let stderr = '';\n      let stdout = '';\n\n      childProcess.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      childProcess.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      childProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve({ success: true });\n        } else {\n          resolve({ \n            success: false, \n            error: `Process exited with code ${code}. Error: ${stderr}` \n          });\n        }\n      });\n\n      childProcess.on('error', (error) => {\n        resolve({ \n          success: false, \n          error: `Failed to start process: ${error.message}` \n        });\n      });\n    });\n  }\n\n  private async fileExists(filePath: string): Promise<boolean> {\n    try {\n      await fs.access(filePath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async listGeneratedMidi(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.outputDir);\n      return files.filter(file => file.endsWith('.mid'));\n    } catch {\n      return [];\n    }\n  }\n\n  async getMidiMetadata(midiPath: string): Promise<any> {\n    try {\n      const metadataPath = midiPath.replace('.mid', '_metadata.json');\n      const metadata = await fs.readFile(metadataPath, 'utf-8');\n      return JSON.parse(metadata);\n    } catch {\n      return null;\n    }\n  }\n\n  async listMidiTemplates(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.templatesDir);\n      return files.filter(file => file.endsWith('.mid') || file.endsWith('.midi'));\n    } catch {\n      return [];\n    }\n  }\n\n  async generateFromTemplate(templateName: string, customizations?: any): Promise<MidiGenerationResult> {\n    try {\n      const templatePath = path.join(this.templatesDir, templateName);\n      const exists = await this.fileExists(templatePath);\n      \n      if (!exists) {\n        return {\n          success: false,\n          error: `Template ${templateName} not found`\n        };\n      }\n\n      // Generate unique filename for the customized version\n      const timestamp = Date.now();\n      const baseName = templateName.replace(/\\.(mid|midi)$/, '');\n      const outputPath = path.join(this.outputDir, `${baseName}_custom_${timestamp}.mid`);\n\n      // Copy template to generated directory\n      await fs.copyFile(templatePath, outputPath);\n\n      // Create metadata for the template-based generation\n      const metadata = {\n        source_template: templateName,\n        generated_at: new Date().toISOString(),\n        customizations: customizations || {},\n        generation_method: 'template_based'\n      };\n\n      const metadataPath = outputPath.replace('.mid', '_metadata.json');\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n\n      return {\n        success: true,\n        midiPath: outputPath,\n        metadataPath: metadataPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Template generation failed: ${error}`\n      };\n    }\n  }\n\n  async catalogTemplates(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/midi-catalog.py',\n        '--scan'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/templates/midi_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Catalog generation failed: ${error}`\n      };\n    }\n  }\n\n  async extractGrooveDataset(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--extract'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/groove/metadata/groove_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Groove dataset extraction failed: ${error}`\n      };\n    }\n  }\n\n  async getGroovesByStyle(style: string): Promise<any[]> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--style', style\n      ]);\n\n      if (result.success) {\n        // Parse the JSON output from the Python script\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getGroovesByTempo(minTempo: number, maxTempo: number): Promise<any[]> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--tempo-min', minTempo.toString(),\n        '--tempo-max', maxTempo.toString()\n      ]);\n\n      if (result.success) {\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async processChordSets(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/chord-sets-processor.py',\n        '--process'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/templates/chord-sets/chord_sets_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Chord sets processing failed: ${error}`\n      };\n    }\n  }\n\n  async getChordSetsByCategory(category?: string, tempoRange?: [number, number]): Promise<any[]> {\n    try {\n      const args = ['./server/chord-sets-processor.py', '--list'];\n      \n      if (category) {\n        args.push('--category', category);\n      }\n      \n      if (tempoRange) {\n        args.push('--tempo-min', tempoRange[0].toString());\n        args.push('--tempo-max', tempoRange[1].toString());\n      }\n\n      const result = await this.executePythonScript(args);\n\n      if (result.success) {\n        // Parse the JSON output from the Python script\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async generateFromChordSet(chordSetName: string, customizations?: any): Promise<MidiGenerationResult> {\n    try {\n      const chordSetPath = path.join('./storage/midi/templates/chord-sets', chordSetName);\n      const exists = await this.fileExists(chordSetPath);\n      \n      if (!exists) {\n        return {\n          success: false,\n          error: `Chord set ${chordSetName} not found`\n        };\n      }\n\n      // Generate unique filename for the chord-based generation\n      const timestamp = Date.now();\n      const baseName = chordSetName.replace(/\\.(mid|midi)$/, '');\n      const outputPath = path.join(this.outputDir, `${baseName}_generated_${timestamp}.mid`);\n\n      // Copy chord set to generated directory as base\n      await fs.copyFile(chordSetPath, outputPath);\n\n      // Create metadata for the chord-based generation\n      const metadata = {\n        source_chord_set: chordSetName,\n        generated_at: new Date().toISOString(),\n        customizations: customizations || {},\n        generation_method: 'chord_set_based'\n      };\n\n      const metadataPath = outputPath.replace('.mid', '_metadata.json');\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n\n      return {\n        success: true,\n        midiPath: outputPath,\n        metadataPath: metadataPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Chord set generation failed: ${error}`\n      };\n    }\n  }\n}\n", "\nimport { Router } from 'express';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\n\nconst router = Router();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: path.join(process.cwd(), 'storage', 'temp'),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n});\n\n// Voice cloning endpoint\nrouter.post('/clone', upload.single('audio'), async (req, res) => {\n  try {\n    const { text, voiceId } = req.body;\n    const audioFile = req.file;\n\n    if (!audioFile || !text) {\n      return res.status(400).json({ \n        error: 'Audio file and text are required for voice cloning' \n      });\n    }\n\n    // Mock implementation - replace with actual RVC integration\n    const result = {\n      success: true,\n      voiceId: `rvc_${Date.now()}`,\n      audioUrl: `/storage/voices/cloned_${Date.now()}.wav`,\n      message: 'Voice cloned successfully (mock mode)'\n    };\n\n    res.json(result);\n  } catch (error) {\n    console.error('Voice cloning error:', error);\n    res.status(500).json({ \n      error: 'Voice cloning failed',\n      details: error.message \n    });\n  }\n});\n\n// Voice synthesis endpoint\nrouter.post('/synthesize', async (req, res) => {\n  try {\n    const { text, voiceId, midiPath } = req.body;\n\n    if (!text || !voiceId) {\n      return res.status(400).json({ \n        error: 'Text and voice ID are required for synthesis' \n      });\n    }\n\n    // Mock implementation\n    const result = {\n      success: true,\n      audioUrl: `/storage/voices/synthesized_${Date.now()}.wav`,\n      midiIntegration: midiPath ? true : false,\n      message: 'Voice synthesized successfully'\n    };\n\n    res.json(result);\n  } catch (error) {\n    console.error('Voice synthesis error:', error);\n    res.status(500).json({ \n      error: 'Voice synthesis failed',\n      details: error.message \n    });\n  }\n});\n\n// Get available voices\nrouter.get('/available', async (req, res) => {\n  try {\n    const voicesDir = path.join(process.cwd(), 'storage', 'voice-bank', 'samples');\n    const files = await fs.readdir(voicesDir);\n    const voices = files\n      .filter(file => file.endsWith('.mp3') || file.endsWith('.wav'))\n      .map(file => ({\n        id: file.replace(/\\.(mp3|wav)$/, ''),\n        name: file.replace(/\\.(mp3|wav)$/, '').replace(/_/g, ' '),\n        file: file\n      }));\n\n    res.json({ voices });\n  } catch (error) {\n    console.error('Error fetching voices:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch available voices',\n      details: error.message \n    });\n  }\n});\n\nexport default router;\n", "\nimport { Router } from 'express';\nimport { MidiService } from '../midi-service.js';\nimport path from 'path';\nimport fs from 'fs/promises';\n\nconst router = Router();\nconst midiService = new MidiService();\n\n// Generate MIDI endpoint\nrouter.post('/generate', async (req, res) => {\n  try {\n    const { title, theme, genre, tempo, duration, useAiLyrics } = req.body;\n\n    if (!title || !theme || !genre || !tempo) {\n      return res.status(400).json({ \n        error: 'Missing required fields: title, theme, genre, tempo' \n      });\n    }\n\n    const result = await midiService.generateMidi({\n      title,\n      theme,\n      genre,\n      tempo: parseInt(tempo),\n      duration: duration ? parseInt(duration) : undefined,\n      useAiLyrics: Boolean(useAiLyrics)\n    });\n\n    if (result.success) {\n      res.json({\n        success: true,\n        midiPath: result.midiPath,\n        metadataPath: result.metadataPath,\n        message: 'MIDI generated successfully'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    console.error('MIDI generation error:', error);\n    res.status(500).json({ \n      error: `MIDI generation failed: ${error}` \n    });\n  }\n});\n\n// List generated MIDI files\nrouter.get('/list', async (req, res) => {\n  try {\n    const midiFiles = await midiService.listGeneratedMidi();\n    res.json({ files: midiFiles });\n  } catch (error) {\n    console.error('Error listing MIDI files:', error);\n    res.status(500).json({ error: `Failed to list MIDI files: ${error}` });\n  }\n});\n\n// Get MIDI metadata\nrouter.get('/:filename/metadata', async (req, res) => {\n  try {\n    const filename = req.params.filename;\n    const midiPath = path.join('./storage/midi/generated', filename);\n    const metadata = await midiService.getMidiMetadata(midiPath);\n\n    if (metadata) {\n      res.json(metadata);\n    } else {\n      res.status(404).json({ error: 'Metadata not found' });\n    }\n  } catch (error) {\n    console.error('Error getting metadata:', error);\n    res.status(500).json({ error: `Failed to get metadata: ${error}` });\n  }\n});\n\n// Extract groove dataset\nrouter.post('/groove/extract', async (req, res) => {\n  try {\n    const result = await midiService.extractGrooveDataset();\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: 'Groove dataset extracted successfully',\n        catalogPath: result.catalogPath\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    console.error('Groove extraction error:', error);\n    res.status(500).json({ error: `Groove extraction failed: ${error}` });\n  }\n});\n\n// Get grooves by style\nrouter.get('/groove/style/:style', async (req, res) => {\n  try {\n    const style = req.params.style;\n    const grooves = await midiService.getGroovesByStyle(style);\n    res.json({ style, grooves });\n  } catch (error) {\n    console.error('Error getting grooves by style:', error);\n    res.status(500).json({ error: `Failed to get grooves: ${error}` });\n  }\n});\n\n// Get grooves by tempo range\nrouter.get('/groove/tempo/:minTempo/:maxTempo', async (req, res) => {\n  try {\n    const minTempo = parseInt(req.params.minTempo);\n    const maxTempo = parseInt(req.params.maxTempo);\n    \n    if (isNaN(minTempo) || isNaN(maxTempo)) {\n      return res.status(400).json({ error: 'Invalid tempo values' });\n    }\n    \n    const grooves = await midiService.getGroovesByTempo(minTempo, maxTempo);\n    res.json({ tempoRange: { min: minTempo, max: maxTempo }, grooves });\n  } catch (error) {\n    console.error('Error getting grooves by tempo:', error);\n    res.status(500).json({ error: `Failed to get grooves: ${error}` });\n  }\n});\n\nexport default router;\n", "\nimport { Router } from 'express';\nimport { AudioLDM2Service } from '../audioldm2-service.js';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\n\nconst router = Router();\nconst audioldm2Service = new AudioLDM2Service();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: path.join(process.cwd(), 'storage', 'temp'),\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\n// Generate personalized music\nrouter.post('/generate', async (req, res) => {\n  try {\n    const { prompt, instanceWord, objectClass, audioLength = 10.0 } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({ error: 'Prompt is required' });\n    }\n\n    const outputDir = path.join(process.cwd(), 'storage', 'music', 'generated');\n    await fs.mkdir(outputDir, { recursive: true });\n\n    const config = {\n      modelPath: 'cvssp/audioldm2',\n      outputDir,\n      instanceWord,\n      objectClass,\n      audioLengthInS: audioLength,\n    };\n\n    const audioFile = await audioldm2Service.generatePersonalizedMusic(prompt, config);\n    \n    res.json({\n      success: true,\n      audioFile: path.basename(audioFile),\n      message: 'Music generated successfully'\n    });\n    \n  } catch (error) {\n    console.error('AudioLDM2 generation error:', error);\n    res.status(500).json({ \n      error: 'Failed to generate music',\n      details: error.message \n    });\n  }\n});\n\n// Train a personalized model\nrouter.post('/train', upload.array('audio_files'), async (req, res) => {\n  try {\n    const { instanceWord, objectClass, maxTrainSteps = 300 } = req.body;\n    \n    if (!instanceWord || !objectClass) {\n      return res.status(400).json({ \n        error: 'Instance word and object class are required' \n      });\n    }\n\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({ \n        error: 'Audio files are required for training' \n      });\n    }\n\n    // Create training directory\n    const trainingDir = path.join(\n      process.cwd(), \n      'storage', \n      'models', \n      'training', \n      `${instanceWord}_${objectClass}_${Date.now()}`\n    );\n    await fs.mkdir(trainingDir, { recursive: true });\n\n    // Move uploaded files to training directory\n    const files = req.files as Express.Multer.File[];\n    for (const file of files) {\n      const destPath = path.join(trainingDir, file.originalname);\n      await fs.rename(file.path, destPath);\n    }\n\n    const outputDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2', `${instanceWord}_${objectClass}`);\n    \n    const config = {\n      dataDir: trainingDir,\n      instanceWord,\n      objectClass,\n      outputDir,\n      maxTrainSteps: parseInt(maxTrainSteps),\n    };\n\n    // Start training (this will run in background)\n    audioldm2Service.trainDreamBooth(config)\n      .then(modelPath => {\n        console.log('Training completed:', modelPath);\n      })\n      .catch(error => {\n        console.error('Training failed:', error);\n      });\n\n    res.json({\n      success: true,\n      message: 'Training started successfully',\n      trainingId: path.basename(outputDir)\n    });\n    \n  } catch (error) {\n    console.error('Training error:', error);\n    res.status(500).json({ \n      error: 'Failed to start training',\n      details: error.message \n    });\n  }\n});\n\n// Get available models\nrouter.get('/models', async (req, res) => {\n  try {\n    const models = await audioldm2Service.getAvailableModels();\n    res.json({ models });\n  } catch (error) {\n    console.error('Error fetching models:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch models',\n      details: error.message \n    });\n  }\n});\n\n// Get training status\nrouter.get('/training/:trainingId/status', async (req, res) => {\n  try {\n    const { trainingId } = req.params;\n    const modelDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2', trainingId);\n    \n    try {\n      await fs.access(path.join(modelDir, 'trained_pipeline'));\n      res.json({ status: 'completed' });\n    } catch {\n      // Check if training is in progress\n      try {\n        await fs.access(modelDir);\n        res.json({ status: 'training' });\n      } catch {\n        res.json({ status: 'not_found' });\n      }\n    }\n  } catch (error) {\n    console.error('Error checking training status:', error);\n    res.status(500).json({ \n      error: 'Failed to check training status',\n      details: error.message \n    });\n  }\n});\n\nexport default router;\n", "\nimport { spawn } from 'child_process';\nimport path from 'path';\nimport fs from 'fs/promises';\n\n// AUDIOLDM2 CONFIGURATION INTERFACE\n// NOTE: Defines configuration options for AudioLDM2 model\n// TODO: Add validation for required vs optional parameters\nexport interface AudioLDM2Config {\n  modelPath: string;           // Path to the AudioLDM2 model\n  outputDir: string;           // Output directory for generated audio\n  instanceWord?: string;       // Custom instance word for personalization\n  objectClass?: string;        // Object class for model training\n  numInferenceSteps?: number;  // Number of inference steps (default: 50)\n  guidanceScale?: number;      // Guidance scale for generation (default: 3.5)\n  audioLengthInS?: number;     // Audio length in seconds (default: 10.0)\n}\n\n// AUDIOLDM2 SERVICE CLASS\n// NOTE: Handles AI music generation using AudioLDM2 model\n// TODO: Add model caching and performance optimization\nexport class AudioLDM2Service {\n  private pythonPath: string;  // Python executable path\n  private scriptPath: string;  // Path to AudioLDM2 scripts\n\n  constructor() {\n    // SERVICE INITIALIZATION\n    // NOTE: Sets up paths and ensures directory structure\n    this.pythonPath = 'python3';\n    this.scriptPath = path.join(process.cwd(), 'temp-dreamsound-repo');\n    \n    // DIRECTORY SETUP\n    // NOTE: Ensures all required directories exist on startup\n    this.ensureDirectories();\n  }\n\n  // DIRECTORY STRUCTURE SETUP\n  // NOTE: Creates essential directories for AudioLDM2 operation\n  // TODO: Add error handling for permission issues\n  private async ensureDirectories() {\n    const dirs = [\n      'storage/models/audioldm2',  // Model storage\n      'storage/music/generated',   // Generated music output\n      'storage/temp'               // Temporary files\n    ];\n    \n    // CREATE DIRECTORIES SILENTLY\n    // NOTE: Uses recursive creation and ignores existing directories\n    for (const dir of dirs) {\n      await fs.mkdir(path.join(process.cwd(), dir), { recursive: true }).catch(() => {});\n    }\n  }\n\n  // PERSONALIZED MUSIC GENERATION METHOD\n  // NOTE: Generates music using AudioLDM2 with custom prompts\n  // TODO: Add progress tracking and intermediate result saving\n  async generatePersonalizedMusic(prompt: string, config: AudioLDM2Config): Promise<string> {\n    // OUTPUT FILE NAMING\n    // NOTE: Creates unique filename with timestamp\n    const outputFile = path.join(config.outputDir, `generated_${Date.now()}.wav`);\n    \n    // PYTHON SCRIPT ARGUMENTS\n    // NOTE: Builds command line arguments for AudioLDM2 inference\n    const args = [\n      path.join(this.scriptPath, 'inference_audioldm2.py'),\n      '--prompt', prompt,\n      '--model_path', config.modelPath,\n      '--output_file', outputFile,\n      '--num_inference_steps', (config.numInferenceSteps || 50).toString(),\n      '--guidance_scale', (config.guidanceScale || 3.5).toString(),\n      '--audio_length_in_s', (config.audioLengthInS || 10.0).toString()\n    ];\n\n    if (config.instanceWord && config.objectClass) {\n      args.push('--instance_word', config.instanceWord);\n      args.push('--object_class', config.objectClass);\n    }\n\n    return new Promise((resolve, reject) => {\n      const childProcess = spawn(this.pythonPath, args);\n      \n      let stdout = '';\n      let stderr = '';\n\n      childProcess.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      childProcess.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      childProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve(outputFile);\n        } else {\n          reject(new Error(`AudioLDM2 generation failed: ${stderr}`));\n        }\n      });\n\n      childProcess.on('error', (error) => {\n        reject(new Error(`Failed to start AudioLDM2 process: ${error.message}`));\n      });\n    });\n  }\n\n  async trainDreamBooth(config: {\n    dataDir: string;\n    instanceWord: string;\n    objectClass: string;\n    outputDir: string;\n    maxTrainSteps?: number;\n    learningRate?: number;\n  }): Promise<string> {\n    const args = [\n      path.join(this.scriptPath, 'dreambooth_audioldm2.py'),\n      '--pretrained_model_name_or_path', 'cvssp/audioldm2',\n      '--train_data_dir', config.dataDir,\n      '--instance_word', config.instanceWord,\n      '--object_class', config.objectClass,\n      '--output_dir', config.outputDir,\n      '--train_batch_size', '1',\n      '--gradient_accumulation_steps', '4',\n      '--max_train_steps', (config.maxTrainSteps || 300).toString(),\n      '--learning_rate', (config.learningRate || 1.0e-05).toString(),\n      '--validation_steps', '50',\n      '--num_validation_audio_files', '3',\n      '--save_as_full_pipeline'\n    ];\n\n    return new Promise((resolve, reject) => {\n      const childProcess = spawn('accelerate', ['launch', ...args]);\n      \n      let stdout = '';\n      let stderr = '';\n\n      childProcess.stdout.on('data', (data) => {\n        stdout += data.toString();\n        console.log('Training output:', data.toString());\n      });\n\n      childProcess.stderr.on('data', (data) => {\n        stderr += data.toString();\n        console.error('Training error:', data.toString());\n      });\n\n      childProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve(path.join(config.outputDir, 'trained_pipeline'));\n        } else {\n          reject(new Error(`DreamBooth training failed: ${stderr}`));\n        }\n      });\n\n      childProcess.on('error', (error) => {\n        reject(new Error(`Failed to start training process: ${error.message}`));\n      });\n    });\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    const modelsDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2');\n    try {\n      await fs.access(modelsDir);\n      const files = await fs.readdir(modelsDir);\n      return files.filter(file => file.endsWith('.pt') || file.endsWith('.ckpt'));\n    } catch {\n      return ['cvssp/audioldm2']; // Default model\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "index_default", "__toCommonJS", "import_express", "import_cors", "import_path", "import_url", "import_dotenv", "import_stripe", "import_child_process", "import_fs", "import_path", "MidiService", "request", "fs", "timestamp", "sanitizedTitle", "outputPath", "path", "enhancedArgs", "result", "midiExists", "metadataPath", "metadataExists", "error", "args", "resolve", "childProcess", "stderr", "stdout", "data", "code", "filePath", "file", "midiPath", "metadata", "templateName", "customizations", "templatePath", "baseName", "style", "minTempo", "maxTempo", "category", "tempoRange", "chordSetName", "chordSetPath", "import_express", "import_path", "import_promises", "import_multer", "router", "upload", "multer", "path", "req", "res", "text", "voiceId", "result", "error", "midiPath", "voicesDir", "voices", "fs", "file", "voice_default", "import_express", "import_path", "router", "midiService", "MidiService", "req", "res", "title", "theme", "genre", "tempo", "duration", "useAiLyrics", "result", "error", "midiFiles", "filename", "midiPath", "path", "metadata", "style", "grooves", "minTempo", "maxTempo", "midi_default", "import_express", "import_child_process", "import_path", "import_promises", "AudioLDM2Service", "path", "dirs", "dir", "fs", "prompt", "config", "outputFile", "args", "resolve", "reject", "childProcess", "stdout", "stderr", "data", "code", "error", "modelsDir", "file", "import_path", "import_promises", "import_multer", "router", "audioldm2Service", "AudioLDM2Service", "upload", "multer", "path", "req", "res", "prompt", "instanceWord", "objectClass", "audioLength", "outputDir", "fs", "config", "audioFile", "error", "maxTrainSteps", "trainingDir", "files", "file", "destPath", "modelPath", "models", "trainingId", "modelDir", "audioldm2_default", "import_meta", "dotenv", "__filename", "__dirname", "path", "stripe", "Stripe", "app", "express", "PORT", "midiService", "MidiService", "cors", "req", "res", "error", "amount", "currency", "userId", "planType", "paymentIntent", "sig", "webhookSecret", "event", "err", "next", "title", "theme", "genre", "tempo", "duration", "useAiLyrics", "result", "midiFiles", "filename", "midiPath", "metadata", "audioPath", "text", "voiceId", "voice_default", "midi_default", "audioldm2_default", "index_default"]
}
