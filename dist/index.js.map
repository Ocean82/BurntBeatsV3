{
  "version": 3,
  "sources": ["../server/index.ts", "../server/midi-service.ts", "../server/middleware/error-handler.ts", "../server/middleware/request-logger.ts", "../server/health/health-check.ts", "../server/config/server.ts", "../server/config/production.ts", "../server/shutdown/graceful-shutdown.ts", "../server/routes/voice.ts", "../server/routes/midi.ts", "../server/routes/audioldm2.ts", "../server/audioldm2-service.ts"],
  "sourcesContent": ["import express from 'express';\nimport cors from 'cors';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport dotenv from 'dotenv';\nimport Stripe from 'stripe';\nimport { dirname, join } from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\nimport helmet from 'helmet';\nimport rateLimit from 'express-rate-limit';\nimport { MidiService } from './midi-service';\nimport { errorHandler, AppError } from './middleware/error-handler';\nimport { healthCheckLogger } from './middleware/request-logger';\nimport { healthCheckHandler, HealthChecker } from './health/health-check';\nimport productionConfig, { resourceMonitor } from './config/production';\nimport GracefulShutdown from './shutdown/graceful-shutdown';\n\n// CORE INITIALIZATION SECTION\n// NOTE: This section handles environment setup and service initialization\n// TODO: Consider moving service initialization to a separate bootstrap file\ndotenv.config();\n\n// ES module compatibility\nconst __filename_compat = fileURLToPath(import.meta.url);\nconst __dirname_compat = path.dirname(__filename_compat);\n\n// PAYMENT PROCESSING SETUP\n// NOTE: Stripe initialization - ensure API version matches production requirements\n// TODO: Add error handling for missing Stripe keys in production\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {\n  apiVersion: '2024-06-20', // IMPORTANT: Keep this version synchronized with Stripe dashboard\n});\n\n// EXPRESS APP CONFIGURATION\nconst app = express();\nconst PORT = process.env.PORT || 5000; // NOTE: 5000 is Replit's recommended port for web apps\n\n// SERVICE INSTANCES\n// NOTE: Initialize core services - consider dependency injection pattern for scalability\nconst midiService = new MidiService(); // MIDI generation and processing service\nconst healthChecker = HealthChecker.getInstance();\n\n// PRODUCTION MIDDLEWARE CONFIGURATION\n// NOTE: Middleware order is crucial - security first, then logging, then parsing\nif (process.env.NODE_ENV === 'production') {\n  app.use(helmet(productionConfig.security.helmet));\n\n  // Rate limiting\n  const limiter = rateLimit(productionConfig.security.rateLimiting);\n  app.use(limiter);\n\n  // Start resource monitoring\n  resourceMonitor.startMonitoring();\n}\n\n// Request logging (skip health checks to reduce noise)\napp.use(healthCheckLogger);\n\n// CORS configuration\napp.use(cors(productionConfig.cors));\n\n// Body parsing with enhanced limits and validation\napp.use(express.json({ \n  limit: productionConfig.limits.json,\n  verify: (req, res, buf) => {\n    if (buf.length > productionConfig.upload.maxFileSize) {\n      throw new AppError('Request payload too large', 413);\n    }\n  }\n}));\n\napp.use(express.urlencoded({ \n  extended: true, \n  limit: productionConfig.limits.urlencoded,\n  verify: (req, res, buf) => {\n    if (buf.length > productionConfig.upload.maxFileSize) {\n      throw new AppError('Request payload too large', 413);\n    }\n  }\n}));\n\n// Server timeout configuration\napp.use((req, res, next) => {\n  req.setTimeout(productionConfig.server.timeout, () => {\n    res.status(408).json({\n      error: 'Request Timeout',\n      message: 'Request took too long to process'\n    });\n  });\n  next();\n});\n\n// STATIC FILE SERVING\n// NOTE: Serves built client files from dist/public directory with optimized caching\napp.use(express.static(path.join(__dirname_compat, '../dist/public'), {\n  maxAge: process.env.NODE_ENV === 'production' ? '1d' : '0',\n  etag: true,\n  lastModified: true\n}));\n\n// STATIC FILE SERVING FOR GENERATED CONTENT\n// NOTE: Serves generated files directly from storage directories\napp.use('/storage', express.static('./storage', {\n  maxAge: process.env.NODE_ENV === 'production' ? '1h' : '0',\n  etag: true\n}));\n\n// Specific routes for better organization\napp.use('/api/files/midi', express.static('./storage/midi/generated'));\napp.use('/api/files/voices', express.static('./storage/voices'));\napp.use('/api/files/music', express.static('./storage/music'));\n\n// ENHANCED HEALTH CHECK ENDPOINT\n// NOTE: Comprehensive health monitoring for production deployment\napp.get('/api/health', healthCheckHandler);\n\n// Lightweight health check for load balancers\napp.get('/health', (req, res) => {\n  const lastCheck = healthChecker.getLastHealthCheck();\n  if (lastCheck && lastCheck.status === 'healthy') {\n    res.status(200).send('OK');\n  } else {\n    res.status(503).send('Service Unavailable');\n  }\n});\n\n// API endpoints\napp.get('/api/status', (req, res) => {\n  res.json({ \n    message: 'Burnt Beats API is running',\n    version: '1.0.0',\n    environment: process.env.NODE_ENV || 'development'\n  });\n});\n\n// STRIPE PAYMENT INTEGRATION\n// NOTE: These endpoints handle payment processing and configuration\n// TODO: Add rate limiting and authentication for payment endpoints\n\n// Stripe Configuration Endpoint\n// NOTE: Provides client-side Stripe configuration\n// SECURITY: Only exposes publishable key (safe for client-side)\napp.get('/api/stripe/config', (req, res) => {\n  res.json({\n    publishableKey: process.env.STRIPE_PUBLISHABLE_KEY,\n    success: true\n  });\n});\n\n// Create Payment Intent\n// NOTE: Server-side payment intent creation for secure processing\n// TODO: Add payment validation and fraud detection\napp.post('/api/stripe/create-payment-intent', async (req, res) => {\n  try {\n    const { amount, currency = 'usd', userId, planType } = req.body;\n\n    if (!amount || !userId) {\n      return res.status(400).json({ error: 'Amount and userId are required' });\n    }\n\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount), // Amount in cents\n      currency,\n      metadata: {\n        userId,\n        planType: planType || 'standard'\n      },\n      automatic_payment_methods: {\n        enabled: true,\n      },\n    });\n\n    res.json({\n      clientSecret: paymentIntent.client_secret,\n      success: true\n    });\n  } catch (error) {\n    console.error('Payment intent creation failed:', error);\n    res.status(500).json({ \n      error: 'Payment processing failed',\n      message: error.message \n    });\n  }\n});\n\n// Stripe Webhook Handler\napp.post('/webhook/stripe', express.raw({ type: 'application/json' }), (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n  let event;\n\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);\n  } catch (err) {\n    console.error('Webhook signature verification failed:', err.message);\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  // Handle the event\n  switch (event.type) {\n    case 'payment_intent.succeeded':\n      const paymentIntent = event.data.object;\n      console.log('Payment succeeded:', paymentIntent.id);\n      // Handle successful payment (upgrade user plan, etc.)\n      break;\n    case 'payment_intent.payment_failed':\n      console.log('Payment failed:', event.data.object.id);\n      // Handle failed payment\n      break;\n    default:\n      console.log(`Unhandled event type: ${event.type}`);\n  }\n\n  res.json({ received: true });\n});\n\n// Get pricing plans\napp.get('/api/stripe/plans', (req, res) => {\n  res.json({\n    plans: [\n      {\n        id: 'basic',\n        name: 'Basic Plan',\n        price: 299, // $2.99 in cents\n        songs: 10,\n        features: ['Basic AI generation', 'Standard quality']\n      },\n      {\n        id: 'pro',\n        name: 'Pro Plan', \n        price: 499, // $4.99 in cents\n        songs: 50,\n        features: ['Advanced AI', 'High quality', 'Voice cloning']\n      },\n      {\n        id: 'premium',\n        name: 'Premium Plan',\n        price: 999, // $9.99 in cents\n        songs: 'unlimited',\n        features: ['All features', 'Priority support', 'Commercial license']\n      }\n    ]\n  });\n});\n\n// Catch-all handler for React app\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname_compat, '../dist/public', 'index.html'));\n});\n\n// MIDI GENERATION ENDPOINTS\n// NOTE: These endpoints handle MIDI file generation and management\n// TODO: Add authentication middleware for user-specific MIDI generation\n\n// Generate MIDI File\n// NOTE: Primary endpoint for MIDI generation from user parameters\n// TODO: Add input validation schema and rate limiting\napp.post('/api/generate-midi', async (req, res) => {\n  try {\n    const { title, theme, genre, tempo, duration, useAiLyrics } = req.body;\n\n    // INPUT VALIDATION\n    // NOTE: Basic validation - consider using a validation library like Joi\n    if (!title || !theme || !genre || !tempo) {\n      return res.status(400).json({ \n        error: 'Missing required fields: title, theme, genre, tempo' \n      });\n    }\n\n    // MIDI GENERATION SERVICE CALL\n    // NOTE: Delegates to MidiService for actual generation logic\n    const result = await midiService.generateMidi({\n      title,\n      theme,\n      genre,\n      tempo: parseInt(tempo),\n      duration: duration ? parseInt(duration) : undefined,\n      useAiLyrics: Boolean(useAiLyrics)\n    });\n\n    if (result.success) {\n      res.json({\n        success: true,\n        midiPath: result.midiPath,\n        metadataPath: result.metadataPath,\n        message: 'MIDI generated successfully'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    res.status(500).json({ \n      error: `MIDI generation failed: ${error}` \n    });\n  }\n});\n\napp.get('/api/midi/list', async (req, res) => {\n  try {\n    const midiFiles = await midiService.listGeneratedMidi();\n    res.json({ files: midiFiles });\n  } catch (error) {\n    res.status(500).json({ error: `Failed to list MIDI files: ${error}` });\n  }\n});\n\napp.get('/api/midi/:filename/metadata', async (req, res) => {\n  try {\n    const filename = req.params.filename;\n    const midiPath = join('./storage/midi/generated', filename);\n    const metadata = await midiService.getMidiMetadata(midiPath);\n\n    if (metadata) {\n      res.json(metadata);\n    } else {\n      res.status(404).json({ error: 'Metadata not found' });\n    }\n  } catch (error) {\n    res.status(500).json({ error: `Failed to get metadata: ${error}` });\n  }\n});\n\n// VOICE CLONING ENDPOINTS\n// NOTE: These endpoints handle voice cloning and synthesis\n// TODO: Implement actual RVC integration and add authentication\n\n// Voice Cloning Endpoint\n// NOTE: Currently mock implementation - needs RVC service integration\n// TODO: Add file upload handling and voice model training\napp.post('/api/voice/clone', async (req, res) => {\n  try {\n    const { audioPath, text, voiceId } = req.body;\n\n    // INPUT VALIDATION\n    if (!audioPath || !text) {\n      return res.status(400).json({ \n        error: 'Audio path and text are required for voice cloning' \n      });\n    }\n\n    // MOCK RVC INTEGRATION\n    // TODO: Replace with actual RVC service call\n    // NOTE: This is a placeholder for RVC voice cloning functionality\n    const result = {\n      success: true,\n      voiceId: `rvc_${Date.now()}`,\n      audioUrl: `/storage/voices/cloned_${Date.now()}.wav`,\n      message: 'Voice cloned successfully (mock mode)'\n    };\n\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ \n      error: `Voice cloning failed: ${error}` \n    });\n  }\n});\n\napp.post('/api/voice/synthesize', async (req, res) => {\n  try {\n    const { text, voiceId, midiPath } = req.body;\n\n    if (!text || !voiceId) {\n      return res.status(400).json({ \n        error: 'Text and voice ID are required for synthesis' \n      });\n    }\n\n    // Mock voice synthesis with MIDI integration\n    const result = {\n      success: true,\n      audioUrl: `/storage/voices/synthesized_${Date.now()}.wav`,\n      midiIntegration: midiPath ? true : false,\n      message: 'Voice synthesized successfully'\n    };\n\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ \n      error: `Voice synthesis failed: ${error}` \n    });\n  }\n});\n\n// MIDDLEWARE SETUP\n// NOTE: Order matters for middleware - body parsing before routes\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' ? \n    ['https://burntbeats.replit.app', 'https://burnt-beats.replit.app'] : \n    ['http://localhost:3000', 'http://localhost:5000'],\n  credentials: true\n}));\n\n// Serve MIDI files from storage\napp.use('/storage', express.static(path.join(__dirname, '../storage')));\n\n// MODULAR ROUTE IMPORTS\n// NOTE: Separates route logic into dedicated modules for maintainability\n// TODO: Consider adding route-specific middleware and validation\nimport voiceRoutes from './routes/voice.js';\nimport midiRoutes from './routes/midi.js';\nimport audioldm2Routes from './routes/audioldm2.js';\n\n// ROUTE REGISTRATION\n// NOTE: Mounts route modules under specific API paths\napp.use('/api/voice', voiceRoutes);   // Voice cloning and synthesis\napp.use('/api/midi', midiRoutes);     // MIDI generation and management\napp.use('/api/audioldm2', audioldm2Routes); // AI music generation\n\n// Complete Song Generation Workflow\napp.post('/api/generate-complete-song', async (req, res) => {\n  try {\n    const { \n      title, \n      theme, \n      genre, \n      tempo, \n      duration, \n      lyrics, \n      voiceId, \n      useAI, \n      includeVocals \n    } = req.body;\n\n    const songId = `song_${Date.now()}`;\n    let result: any = {\n      id: songId,\n      title,\n      genre,\n      tempo,\n      components: {},\n      status: 'processing'\n    };\n\n    // Step 1: Generate MIDI backing track\n    console.log('\uD83C\uDFB5 Generating MIDI track...');\n    const midiResult = await midiService.generateMidi({\n      title,\n      theme,\n      genre,\n      tempo: parseInt(tempo),\n      duration: duration ? parseInt(duration) : undefined,\n      useAiLyrics: Boolean(lyrics)\n    });\n\n    if (midiResult.success) {\n      result.components.midi = {\n        path: midiResult.midiPath,\n        metadata: midiResult.metadataPath\n      };\n      console.log('\u2705 MIDI generated successfully');\n    }\n\n    // Step 2: Generate AI music if requested\n    if (useAI) {\n      console.log('\uD83E\uDD16 Generating AI music...');\n      try {\n        const aiPrompt = `${genre} music, ${theme}, ${tempo} BPM, instrumental track`;\n        // Mock AI music generation - replace with actual AudioLDM2 service\n        result.components.aiMusic = {\n          path: `/storage/music/generated/ai_${songId}.wav`,\n          prompt: aiPrompt\n        };\n        console.log('\u2705 AI music generated');\n      } catch (error) {\n        console.error('AI music generation failed:', error);\n      }\n    }\n\n    // Step 3: Generate vocals if requested\n    if (includeVocals && lyrics) {\n      console.log('\uD83C\uDFA4 Generating vocals...');\n      try {\n        // Mock vocal generation - replace with actual RVC service\n        result.components.vocals = {\n          path: `/storage/voices/vocals_${songId}.wav`,\n          lyrics: lyrics,\n          voiceId: voiceId || 'default'\n        };\n        console.log('\u2705 Vocals generated');\n      } catch (error) {\n        console.error('Vocal generation failed:', error);\n      }\n    }\n\n    result.status = 'completed';\n    result.createdAt = new Date().toISOString();\n\n    res.json({\n      success: true,\n      song: result,\n      message: 'Complete song generated successfully'\n    });\n\n  } catch (error) {\n    console.error('Complete song generation failed:', error);\n    res.status(500).json({ \n      success: false,\n      error: `Complete song generation failed: ${error.message}` \n    });\n  }\n});\n\n// Get all generated songs\napp.get('/api/songs/library', async (req, res) => {\n  try {\n    // Mock library - in production, this would query a database\n    const library = {\n      songs: [],\n      midi: await midiService.listGeneratedMidi(),\n      voices: [], // Would list voice files\n      aiMusic: [] // Would list AI-generated music\n    };\n\n    res.json(library);\n  } catch (error) {\n    res.status(500).json({ error: `Failed to get library: ${error.message}` });\n  }\n});\n\n// Enhanced error handling middleware (must be last)\napp.use(errorHandler);\n\napp.post('/api/generate-song', async (req, res) => {\n  try {\n    const { lyrics, genre, tempo, voiceSample, useAI } = req.body;\n\n    // Step 1: Generate MIDI backing track\n    const { spawn } = require('child_process');\n    const midiResult = await new Promise((resolve, reject) => {\n      const midiProcess = spawn('python3', [\n        'server/enhanced-midi-generator.py',\n        '--lyrics', lyrics,\n        '--genre', genre,\n        '--tempo', tempo.toString()\n      ]);\n\n      let output = '';\n      midiProcess.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n\n      midiProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve(JSON.parse(output));\n        } else {\n          reject(new Error('MIDI generation failed'));\n        }\n      });\n    });\n\n    // Step 2: Generate vocals if voice sample provided\n    let vocalResult = null;\n    if (voiceSample) {\n      const rvcService = new RVCService();\n      vocalResult = await rvcService.cloneVoice(voiceSample, lyrics);\n    }\n\n    // Step 3: Generate AI music if requested\n    let aiMusicResult = null;\n    if (useAI) {\n      const audioldm2Service = new AudioLDM2Service();\n      aiMusicResult = await audioldm2Service.generateMusic(\n        `${genre} song with lyrics: ${lyrics}`,\n        60\n      );\n    }\n\n    const songData = {\n      id: Date.now().toString(),\n      lyrics,\n      genre,\n      tempo,\n      midiPath: midiResult.midiPath,\n      vocalPath: vocalResult?.audioData,\n      aiMusicPath: aiMusicResult?.audioPath,\n      status: 'completed',\n      createdAt: new Date().toISOString()\n    };\n\n    res.json(songData);\n  } catch (error) {\n    res.status(500).json({ error: `Song generation failed: ${error.message}` });\n  }\n});\n\n// Start server with enhanced configuration\nconst server = app.listen(PORT, '0.0.0.0', () => {\n  console.log(`\uD83D\uDD25 Burnt Beats server running on http://0.0.0.0:${PORT}`);\n  console.log(`\uD83C\uDFB5 MIDI generation available`);\n  console.log(`\uD83D\uDDE3\uFE0F  Voice cloning available (mock mode)`);\n  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`\uD83D\uDEE1\uFE0F  Security features: ${process.env.NODE_ENV === 'production' ? 'ENABLED' : 'DISABLED'}`);\n  console.log(`\uD83D\uDCCA Resource monitoring: ${process.env.NODE_ENV === 'production' ? 'ACTIVE' : 'INACTIVE'}`);\n});\n\n// Configure server timeouts\nif (process.env.NODE_ENV === 'production') {\n  server.setTimeout(productionConfig.server.timeout);\n  server.keepAliveTimeout = productionConfig.server.keepAliveTimeout;\n  server.headersTimeout = productionConfig.server.headersTimeout;\n}\n\n// Start health checks\nhealthChecker.startPeriodicHealthChecks();\n\n// SPA FALLBACK ROUTING\n// NOTE: Ensures React Router works correctly by serving index.html for non-API routes\napp.get('*', (req, res) => {\n  // Skip API routes\n  if (req.path.startsWith('/api/') || req.path.startsWith('/storage/')) {\n    return res.status(404).json({ error: 'Not found' });\n  }\n\n  // Serve React app for all other routes\n  res.sendFile(path.join(__dirname_compat, '../dist/public/index.html'));\n});\n\n// Initialize graceful shutdown\nconst gracefulShutdown = new GracefulShutdown(server);\n\n// Handle server errors\nserver.on('error', (error: any) => {\n  console.error('[SERVER] Server error:', error);\n\n  if (error.code === 'EADDRINUSE') {\n    console.error(`[SERVER] Port ${PORT} is already in use`);\n    process.exit(1);\n  }\n\n  if (error.code === 'EACCES') {\n    console.error(`[SERVER] Permission denied to bind to port ${PORT}`);\n    process.exit(1);\n  }\n});\n\nserver.on('clientError', (error: any, socket: any) => {\n  console.error('[SERVER] Client error:', error);\n  socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n});\n\nexport default app;", "\nimport { spawn } from 'child_process';\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// TYPE DEFINITIONS\n// NOTE: These interfaces define the contract for MIDI generation\n// TODO: Add validation decorators or runtime type checking\n\nexport interface MidiGenerationRequest {\n  title: string;           // Song title\n  theme: string;          // Musical theme/mood\n  genre: string;          // Music genre\n  tempo: number;          // BPM (beats per minute)\n  duration?: number;      // Optional duration in seconds\n  useAiLyrics?: boolean;  // Whether to generate AI lyrics\n  voiceId?: string;       // Optional voice ID for synthesis\n  generateVoice?: boolean; // Whether to generate voice track\n}\n\nexport interface MidiGenerationResult {\n  success: boolean;        // Operation success status\n  midiPath?: string;      // Path to generated MIDI file\n  metadataPath?: string;  // Path to metadata file\n  error?: string;         // Error message if failed\n}\n\n// MIDI SERVICE CLASS\n// NOTE: Handles all MIDI generation and template management\n// TODO: Add caching mechanism for frequently used templates\nexport class MidiService {\n  // SERVICE CONFIGURATION\n  // NOTE: These paths are configurable for different environments\n  private pythonPath = 'python3';                    // Python executable\n  private generatorScript = './music Gen extra/Main.py'; // Main generator script\n  private outputDir = './storage/midi/generated';    // Output directory\n  private templatesDir = './storage/midi/templates'; // Template directory\n\n  // MAIN MIDI GENERATION METHOD\n  // NOTE: Orchestrates the entire MIDI generation process\n  // TODO: Add progress tracking and cancellation support\n  async generateMidi(request: MidiGenerationRequest): Promise<MidiGenerationResult> {\n    try {\n      // DIRECTORY PREPARATION\n      // NOTE: Ensures output directory exists before generation\n      await fs.mkdir(this.outputDir, { recursive: true });\n\n      // FILENAME GENERATION\n      // NOTE: Creates unique filename with timestamp to prevent conflicts\n      const timestamp = Date.now();\n      const sanitizedTitle = request.title.replace(/[^a-zA-Z0-9]/g, '_'); // Remove special chars\n      const outputPath = path.join(this.outputDir, `${sanitizedTitle}_${timestamp}.mid`);\n\n      // PYTHON SCRIPT ARGUMENTS\n      // NOTE: Builds argument array for Python script execution\n      // TODO: Add validation for script path existence\n      const enhancedArgs = [\n        './server/enhanced-midi-generator.py', // Enhanced generator script\n        '--title', request.title,\n        '--theme', request.theme,\n        '--genre', request.genre,\n        '--tempo', request.tempo.toString(),\n        '--output', outputPath\n      ];\n\n      if (request.useAiLyrics) {\n        enhancedArgs.push('--ai-lyrics');\n      }\n\n      if (request.duration) {\n        enhancedArgs.push('--duration', request.duration.toString());\n      }\n\n      if (request.voiceId) {\n        enhancedArgs.push('--voice-id', request.voiceId);\n      }\n\n      // Execute enhanced Python script with chords2midi\n      const result = await this.executePythonScript(enhancedArgs);\n      \n      if (result.success) {\n        // Check if files were created\n        const midiExists = await this.fileExists(outputPath);\n        const metadataPath = outputPath.replace('.mid', '_metadata.json');\n        const metadataExists = await this.fileExists(metadataPath);\n\n        return {\n          success: midiExists,\n          midiPath: midiExists ? outputPath : undefined,\n          metadataPath: metadataExists ? metadataPath : undefined,\n          error: midiExists ? undefined : 'MIDI file was not generated'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `MIDI generation failed: ${error}`\n      };\n    }\n  }\n\n  private async executePythonScript(args: string[]): Promise<{ success: boolean; error?: string }> {\n    return new Promise((resolve) => {\n      const childProcess = spawn(this.pythonPath, args);\n      let stderr = '';\n      let stdout = '';\n\n      childProcess.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      childProcess.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      childProcess.on('close', (code) => {\n        if (code === 0) {\n          resolve({ success: true });\n        } else {\n          resolve({ \n            success: false, \n            error: `Process exited with code ${code}. Error: ${stderr}` \n          });\n        }\n      });\n\n      childProcess.on('error', (error) => {\n        resolve({ \n          success: false, \n          error: `Failed to start process: ${error.message}` \n        });\n      });\n    });\n  }\n\n  private async fileExists(filePath: string): Promise<boolean> {\n    try {\n      await fs.access(filePath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async listGeneratedMidi(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.outputDir);\n      return files.filter(file => file.endsWith('.mid'));\n    } catch {\n      return [];\n    }\n  }\n\n  async getMidiMetadata(midiPath: string): Promise<any> {\n    try {\n      const metadataPath = midiPath.replace('.mid', '_metadata.json');\n      const metadata = await fs.readFile(metadataPath, 'utf-8');\n      return JSON.parse(metadata);\n    } catch {\n      return null;\n    }\n  }\n\n  async listMidiTemplates(): Promise<string[]> {\n    try {\n      const files = await fs.readdir(this.templatesDir);\n      return files.filter(file => file.endsWith('.mid') || file.endsWith('.midi'));\n    } catch {\n      return [];\n    }\n  }\n\n  async generateFromTemplate(templateName: string, customizations?: any): Promise<MidiGenerationResult> {\n    try {\n      const templatePath = path.join(this.templatesDir, templateName);\n      const exists = await this.fileExists(templatePath);\n      \n      if (!exists) {\n        return {\n          success: false,\n          error: `Template ${templateName} not found`\n        };\n      }\n\n      // Generate unique filename for the customized version\n      const timestamp = Date.now();\n      const baseName = templateName.replace(/\\.(mid|midi)$/, '');\n      const outputPath = path.join(this.outputDir, `${baseName}_custom_${timestamp}.mid`);\n\n      // Copy template to generated directory\n      await fs.copyFile(templatePath, outputPath);\n\n      // Create metadata for the template-based generation\n      const metadata = {\n        source_template: templateName,\n        generated_at: new Date().toISOString(),\n        customizations: customizations || {},\n        generation_method: 'template_based'\n      };\n\n      const metadataPath = outputPath.replace('.mid', '_metadata.json');\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n\n      return {\n        success: true,\n        midiPath: outputPath,\n        metadataPath: metadataPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Template generation failed: ${error}`\n      };\n    }\n  }\n\n  async catalogTemplates(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/midi-catalog.py',\n        '--scan'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/templates/midi_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Catalog generation failed: ${error}`\n      };\n    }\n  }\n\n  async extractGrooveDataset(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--extract'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/groove/metadata/groove_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Groove dataset extraction failed: ${error}`\n      };\n    }\n  }\n\n  async getGroovesByStyle(style: string): Promise<any[]> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--style', style\n      ]);\n\n      if (result.success) {\n        // Parse the JSON output from the Python script\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async getGroovesByTempo(minTempo: number, maxTempo: number): Promise<any[]> {\n    try {\n      const result = await this.executePythonScript([\n        './server/groove-dataset-loader.py',\n        '--tempo-min', minTempo.toString(),\n        '--tempo-max', maxTempo.toString()\n      ]);\n\n      if (result.success) {\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async processChordSets(): Promise<{ success: boolean; catalogPath?: string; error?: string }> {\n    try {\n      const result = await this.executePythonScript([\n        './server/chord-sets-processor.py',\n        '--process'\n      ]);\n\n      if (result.success) {\n        return {\n          success: true,\n          catalogPath: './storage/midi/templates/chord-sets/chord_sets_catalog.json'\n        };\n      } else {\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: `Chord sets processing failed: ${error}`\n      };\n    }\n  }\n\n  async getChordSetsByCategory(category?: string, tempoRange?: [number, number]): Promise<any[]> {\n    try {\n      const args = ['./server/chord-sets-processor.py', '--list'];\n      \n      if (category) {\n        args.push('--category', category);\n      }\n      \n      if (tempoRange) {\n        args.push('--tempo-min', tempoRange[0].toString());\n        args.push('--tempo-max', tempoRange[1].toString());\n      }\n\n      const result = await this.executePythonScript(args);\n\n      if (result.success) {\n        // Parse the JSON output from the Python script\n        return [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async generateFromChordSet(chordSetName: string, customizations?: any): Promise<MidiGenerationResult> {\n    try {\n      const chordSetPath = path.join('./storage/midi/templates/chord-sets', chordSetName);\n      const exists = await this.fileExists(chordSetPath);\n      \n      if (!exists) {\n        return {\n          success: false,\n          error: `Chord set ${chordSetName} not found`\n        };\n      }\n\n      // Generate unique filename for the chord-based generation\n      const timestamp = Date.now();\n      const baseName = chordSetName.replace(/\\.(mid|midi)$/, '');\n      const outputPath = path.join(this.outputDir, `${baseName}_generated_${timestamp}.mid`);\n\n      // Copy chord set to generated directory as base\n      await fs.copyFile(chordSetPath, outputPath);\n\n      // Create metadata for the chord-based generation\n      const metadata = {\n        source_chord_set: chordSetName,\n        generated_at: new Date().toISOString(),\n        customizations: customizations || {},\n        generation_method: 'chord_set_based'\n      };\n\n      const metadataPath = outputPath.replace('.mid', '_metadata.json');\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n\n      return {\n        success: true,\n        midiPath: outputPath,\n        metadataPath: metadataPath\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Chord set generation failed: ${error}`\n      };\n    }\n  }\n}\n", "\nimport { Request, Response, NextFunction } from 'express';\nimport { ZodError } from 'zod';\n\nexport interface ErrorResponse {\n  error: string;\n  message: string;\n  status: number;\n  timestamp: string;\n  requestId?: string;\n  stack?: string;\n}\n\nexport class AppError extends Error {\n  public readonly status: number;\n  public readonly isOperational: boolean;\n\n  constructor(message: string, status: number = 500, isOperational: boolean = true) {\n    super(message);\n    this.status = status;\n    this.isOperational = isOperational;\n    \n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport const errorHandler = (\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void => {\n  const requestId = req.headers['x-request-id'] as string || generateRequestId();\n  \n  console.error(`[${new Date().toISOString()}] Error ${requestId}:`, {\n    message: error.message,\n    stack: error.stack,\n    url: req.url,\n    method: req.method,\n    headers: req.headers,\n    body: req.body\n  });\n\n  // Handle Zod validation errors\n  if (error instanceof ZodError) {\n    const errorResponse: ErrorResponse = {\n      error: 'Validation Error',\n      message: error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(', '),\n      status: 400,\n      timestamp: new Date().toISOString(),\n      requestId\n    };\n    res.status(400).json(errorResponse);\n    return;\n  }\n\n  // Handle custom app errors\n  if (error instanceof AppError) {\n    const errorResponse: ErrorResponse = {\n      error: 'Application Error',\n      message: error.message,\n      status: error.status,\n      timestamp: new Date().toISOString(),\n      requestId,\n      ...(process.env.NODE_ENV === 'development' && { stack: error.stack })\n    };\n    res.status(error.status).json(errorResponse);\n    return;\n  }\n\n  // Handle database connection errors\n  if (error.message.includes('ECONNREFUSED') || error.message.includes('database')) {\n    const errorResponse: ErrorResponse = {\n      error: 'Database Connection Error',\n      message: 'Unable to connect to database. Please try again later.',\n      status: 503,\n      timestamp: new Date().toISOString(),\n      requestId\n    };\n    res.status(503).json(errorResponse);\n    return;\n  }\n\n  // Handle file system errors\n  if (error.message.includes('ENOENT') || error.message.includes('EACCES')) {\n    const errorResponse: ErrorResponse = {\n      error: 'File System Error',\n      message: 'File operation failed. Please check permissions.',\n      status: 500,\n      timestamp: new Date().toISOString(),\n      requestId\n    };\n    res.status(500).json(errorResponse);\n    return;\n  }\n\n  // Handle timeout errors\n  if (error.message.includes('timeout') || error.message.includes('ETIMEDOUT')) {\n    const errorResponse: ErrorResponse = {\n      error: 'Request Timeout',\n      message: 'Request took too long to process. Please try again.',\n      status: 408,\n      timestamp: new Date().toISOString(),\n      requestId\n    };\n    res.status(408).json(errorResponse);\n    return;\n  }\n\n  // Default error response\n  const errorResponse: ErrorResponse = {\n    error: 'Internal Server Error',\n    message: process.env.NODE_ENV === 'production' \n      ? 'Something went wrong. Please try again later.' \n      : error.message,\n    status: 500,\n    timestamp: new Date().toISOString(),\n    requestId,\n    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })\n  };\n\n  res.status(500).json(errorResponse);\n};\n\nexport const asyncHandler = (fn: Function) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\nfunction generateRequestId(): string {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n", "\nimport { Request, Response, NextFunction } from 'express';\n\ninterface RequestLog {\n  requestId: string;\n  method: string;\n  url: string;\n  userAgent?: string;\n  ip: string;\n  timestamp: string;\n  responseTime?: number;\n  statusCode?: number;\n  contentLength?: number;\n  error?: string;\n}\n\nexport const requestLogger = (req: Request, res: Response, next: NextFunction): void => {\n  const requestId = generateRequestId();\n  const startTime = Date.now();\n  \n  // Add request ID to headers for tracing\n  req.headers['x-request-id'] = requestId;\n  res.setHeader('X-Request-ID', requestId);\n\n  const requestLog: RequestLog = {\n    requestId,\n    method: req.method,\n    url: req.url,\n    userAgent: req.get('User-Agent'),\n    ip: req.ip || req.connection.remoteAddress || 'unknown',\n    timestamp: new Date().toISOString()\n  };\n\n  // Log request start\n  console.log(`[${requestLog.timestamp}] ${requestLog.method} ${requestLog.url} - ${requestLog.ip} [${requestId}]`);\n\n  // Capture response details\n  const originalSend = res.send;\n  res.send = function(body) {\n    const responseTime = Date.now() - startTime;\n    \n    requestLog.responseTime = responseTime;\n    requestLog.statusCode = res.statusCode;\n    requestLog.contentLength = Buffer.byteLength(body || '');\n\n    // Log response\n    const logLevel = res.statusCode >= 400 ? 'ERROR' : 'INFO';\n    console.log(`[${new Date().toISOString()}] ${logLevel} ${requestLog.method} ${requestLog.url} - ${res.statusCode} ${responseTime}ms ${requestLog.contentLength}bytes [${requestId}]`);\n\n    // Log slow requests\n    if (responseTime > 5000) {\n      console.warn(`[SLOW REQUEST] ${requestLog.method} ${requestLog.url} took ${responseTime}ms [${requestId}]`);\n    }\n\n    return originalSend.call(this, body);\n  };\n\n  next();\n};\n\nexport const healthCheckLogger = (req: Request, res: Response, next: NextFunction): void => {\n  // Skip logging for health checks to reduce noise\n  if (req.url === '/api/health' || req.url === '/health') {\n    return next();\n  }\n  return requestLogger(req, res, next);\n};\n\nfunction generateRequestId(): string {\n  return Math.random().toString(36).substring(2, 15);\n}\n", "\nimport { Request, Response } from 'express';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ninterface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  uptime: number;\n  version: string;\n  services: {\n    database: ServiceStatus;\n    filesystem: ServiceStatus;\n    memory: ServiceStatus;\n    stripe: ServiceStatus;\n    storage: ServiceStatus;\n  };\n  metrics: {\n    memory: MemoryMetrics;\n    process: ProcessMetrics;\n  };\n}\n\ninterface ServiceStatus {\n  status: 'up' | 'down' | 'degraded';\n  responseTime?: number;\n  error?: string;\n  lastChecked: string;\n}\n\ninterface MemoryMetrics {\n  heapUsed: number;\n  heapTotal: number;\n  external: number;\n  rss: number;\n  usage: number;\n}\n\ninterface ProcessMetrics {\n  uptime: number;\n  pid: number;\n  cpuUsage: NodeJS.CpuUsage;\n}\n\nexport class HealthChecker {\n  private static instance: HealthChecker;\n  private lastHealthCheck: HealthStatus | null = null;\n  private healthCheckInterval: NodeJS.Timeout | null = null;\n\n  private constructor() {}\n\n  static getInstance(): HealthChecker {\n    if (!HealthChecker.instance) {\n      HealthChecker.instance = new HealthChecker();\n    }\n    return HealthChecker.instance;\n  }\n\n  async checkHealth(): Promise<HealthStatus> {\n    const startTime = Date.now();\n    \n    try {\n      const [database, filesystem, memory, stripe, storage] = await Promise.allSettled([\n        this.checkDatabase(),\n        this.checkFilesystem(),\n        this.checkMemory(),\n        this.checkStripe(),\n        this.checkStorage()\n      ]);\n\n      const services = {\n        database: this.resolveServiceStatus(database),\n        filesystem: this.resolveServiceStatus(filesystem),\n        memory: this.resolveServiceStatus(memory),\n        stripe: this.resolveServiceStatus(stripe),\n        storage: this.resolveServiceStatus(storage)\n      };\n\n      const overallStatus = this.determineOverallStatus(services);\n      \n      const healthStatus: HealthStatus = {\n        status: overallStatus,\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        version: process.env.npm_package_version || '1.0.0',\n        services,\n        metrics: {\n          memory: this.getMemoryMetrics(),\n          process: this.getProcessMetrics()\n        }\n      };\n\n      this.lastHealthCheck = healthStatus;\n      \n      const responseTime = Date.now() - startTime;\n      console.log(`[HEALTH] Health check completed in ${responseTime}ms - Status: ${overallStatus}`);\n      \n      return healthStatus;\n    } catch (error) {\n      console.error('[HEALTH] Health check failed:', error);\n      \n      const errorStatus: HealthStatus = {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        version: process.env.npm_package_version || '1.0.0',\n        services: {\n          database: { status: 'down', error: 'Health check failed', lastChecked: new Date().toISOString() },\n          filesystem: { status: 'down', error: 'Health check failed', lastChecked: new Date().toISOString() },\n          memory: { status: 'down', error: 'Health check failed', lastChecked: new Date().toISOString() },\n          stripe: { status: 'down', error: 'Health check failed', lastChecked: new Date().toISOString() },\n          storage: { status: 'down', error: 'Health check failed', lastChecked: new Date().toISOString() }\n        },\n        metrics: {\n          memory: this.getMemoryMetrics(),\n          process: this.getProcessMetrics()\n        }\n      };\n\n      this.lastHealthCheck = errorStatus;\n      return errorStatus;\n    }\n  }\n\n  private async checkDatabase(): Promise<ServiceStatus> {\n    const start = Date.now();\n    try {\n      // Simple connection test - adjust based on your database setup\n      await new Promise(resolve => setTimeout(resolve, 10)); // Simulate DB check\n      \n      return {\n        status: 'up',\n        responseTime: Date.now() - start,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error instanceof Error ? error.message : 'Database connection failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkFilesystem(): Promise<ServiceStatus> {\n    const start = Date.now();\n    try {\n      const testDir = './storage';\n      await fs.access(testDir);\n      \n      // Test write permissions\n      const testFile = path.join(testDir, 'health-check-test.tmp');\n      await fs.writeFile(testFile, 'test');\n      await fs.unlink(testFile);\n      \n      return {\n        status: 'up',\n        responseTime: Date.now() - start,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error instanceof Error ? error.message : 'Filesystem check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkMemory(): Promise<ServiceStatus> {\n    const start = Date.now();\n    try {\n      const usage = process.memoryUsage();\n      const usagePercent = usage.heapUsed / usage.heapTotal;\n      \n      const status = usagePercent > 0.9 ? 'degraded' : 'up';\n      \n      return {\n        status,\n        responseTime: Date.now() - start,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error instanceof Error ? error.message : 'Memory check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkStripe(): Promise<ServiceStatus> {\n    const start = Date.now();\n    try {\n      const hasStripeKey = !!process.env.STRIPE_SECRET_KEY;\n      \n      return {\n        status: hasStripeKey ? 'up' : 'degraded',\n        responseTime: Date.now() - start,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error instanceof Error ? error.message : 'Stripe check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private async checkStorage(): Promise<ServiceStatus> {\n    const start = Date.now();\n    try {\n      const directories = ['./storage/midi', './storage/voices', './storage/music'];\n      \n      for (const dir of directories) {\n        await fs.access(dir);\n      }\n      \n      return {\n        status: 'up',\n        responseTime: Date.now() - start,\n        lastChecked: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        status: 'down',\n        error: error instanceof Error ? error.message : 'Storage check failed',\n        lastChecked: new Date().toISOString()\n      };\n    }\n  }\n\n  private resolveServiceStatus(result: PromiseSettledResult<ServiceStatus>): ServiceStatus {\n    if (result.status === 'fulfilled') {\n      return result.value;\n    }\n    \n    return {\n      status: 'down',\n      error: result.reason?.message || 'Service check failed',\n      lastChecked: new Date().toISOString()\n    };\n  }\n\n  private determineOverallStatus(services: HealthStatus['services']): 'healthy' | 'degraded' | 'unhealthy' {\n    const statuses = Object.values(services).map(s => s.status);\n    \n    if (statuses.includes('down')) {\n      return 'unhealthy';\n    }\n    \n    if (statuses.includes('degraded')) {\n      return 'degraded';\n    }\n    \n    return 'healthy';\n  }\n\n  private getMemoryMetrics(): MemoryMetrics {\n    const usage = process.memoryUsage();\n    \n    return {\n      heapUsed: Math.round(usage.heapUsed / 1024 / 1024),\n      heapTotal: Math.round(usage.heapTotal / 1024 / 1024),\n      external: Math.round(usage.external / 1024 / 1024),\n      rss: Math.round(usage.rss / 1024 / 1024),\n      usage: Math.round((usage.heapUsed / usage.heapTotal) * 100)\n    };\n  }\n\n  private getProcessMetrics(): ProcessMetrics {\n    return {\n      uptime: Math.round(process.uptime()),\n      pid: process.pid,\n      cpuUsage: process.cpuUsage()\n    };\n  }\n\n  startPeriodicHealthChecks(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = setInterval(async () => {\n      await this.checkHealth();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('[HEALTH] Periodic health checks started');\n  }\n\n  stopPeriodicHealthChecks(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n  }\n\n  getLastHealthCheck(): HealthStatus | null {\n    return this.lastHealthCheck;\n  }\n}\n\nexport const healthCheckHandler = async (req: Request, res: Response): Promise<void> => {\n  const healthChecker = HealthChecker.getInstance();\n  \n  try {\n    const health = await healthChecker.checkHealth();\n    const statusCode = health.status === 'healthy' ? 200 : health.status === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json(health);\n  } catch (error) {\n    console.error('[HEALTH] Health check endpoint failed:', error);\n    res.status(500).json({\n      status: 'unhealthy',\n      error: 'Health check failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n\nexport default HealthChecker;\n", "\nexport const serverConfig = {\n  port: process.env.PORT || 5000,\n  host: '0.0.0.0',\n  cors: {\n    origin: process.env.NODE_ENV === 'production' ? \n      ['https://burntbeats.replit.app', 'https://burnt-beats.replit.app'] : \n      ['http://localhost:3000', 'http://localhost:5000', 'http://0.0.0.0:3000', 'http://0.0.0.0:5000'],\n    credentials: true\n  },\n  limits: {\n    json: '50mb',\n    urlencoded: '50mb'\n  },\n  static: {\n    maxAge: process.env.NODE_ENV === 'production' ? '1d' : '0'\n  },\n  security: {\n    rateLimit: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100 // limit each IP to 100 requests per windowMs\n    }\n  }\n};\n\nexport const paths = {\n  storage: {\n    midi: './storage/midi',\n    voices: './storage/voices',\n    music: './storage/music',\n    temp: './storage/temp'\n  },\n  static: {\n    client: '../dist/public',\n    uploads: './storage'\n  }\n};\n", "\nimport { serverConfig } from './server';\n\nexport const productionConfig = {\n  ...serverConfig,\n  \n  // Enhanced security settings\n  security: {\n    ...serverConfig.security,\n    helmet: {\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n          fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n          scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n          imgSrc: [\"'self'\", \"data:\", \"https:\"],\n          connectSrc: [\"'self'\", \"https://api.stripe.com\"],\n          mediaSrc: [\"'self'\", \"blob:\"],\n          objectSrc: [\"'none'\"],\n          frameSrc: [\"'self'\", \"https://js.stripe.com\"]\n        }\n      },\n      crossOriginEmbedderPolicy: false,\n      crossOriginResourcePolicy: { policy: \"cross-origin\" }\n    },\n    rateLimiting: {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100, // requests per window\n      standardHeaders: true,\n      legacyHeaders: false,\n      message: {\n        error: 'Too many requests',\n        message: 'Rate limit exceeded. Please try again later.',\n        retryAfter: 900\n      }\n    }\n  },\n\n  // Server timeouts and limits\n  server: {\n    timeout: 30000, // 30 seconds\n    keepAliveTimeout: 65000, // 65 seconds\n    headersTimeout: 66000, // 66 seconds\n    maxHeaderSize: 16384, // 16KB\n    requestTimeout: 30000 // 30 seconds\n  },\n\n  // Database connection pool settings\n  database: {\n    maxConnections: 10,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 10000,\n    acquireTimeoutMillis: 60000\n  },\n\n  // File upload limits\n  upload: {\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    maxFiles: 10,\n    allowedMimeTypes: [\n      'audio/mpeg',\n      'audio/wav',\n      'audio/x-wav',\n      'audio/flac',\n      'audio/ogg',\n      'audio/aac',\n      'audio/mp4',\n      'audio/webm'\n    ]\n  },\n\n  // Caching configuration\n  cache: {\n    staticFiles: {\n      maxAge: process.env.NODE_ENV === 'production' ? 86400000 : 0, // 24 hours in prod\n      etag: true,\n      lastModified: true,\n      immutable: false\n    },\n    api: {\n      maxAge: 300000, // 5 minutes for API responses\n      staleWhileRevalidate: 60000 // 1 minute\n    }\n  },\n\n  // Memory management\n  memory: {\n    heapWarningThreshold: 0.8, // 80% of max heap\n    cleanupInterval: 60000, // 1 minute\n    tempFileCleanup: 300000 // 5 minutes\n  },\n\n  // Monitoring and health checks\n  monitoring: {\n    healthCheckInterval: 30000, // 30 seconds\n    metricsCollection: true,\n    performanceTracking: true\n  }\n};\n\n// Resource monitoring\nexport const resourceMonitor = {\n  checkMemoryUsage: () => {\n    const usage = process.memoryUsage();\n    const threshold = productionConfig.memory.heapWarningThreshold;\n    \n    if (usage.heapUsed / usage.heapTotal > threshold) {\n      console.warn(`[MEMORY WARNING] Heap usage: ${Math.round((usage.heapUsed / usage.heapTotal) * 100)}%`);\n      \n      if (global.gc) {\n        global.gc();\n        console.log('[MEMORY] Manual garbage collection triggered');\n      }\n    }\n    \n    return {\n      heapUsed: Math.round(usage.heapUsed / 1024 / 1024),\n      heapTotal: Math.round(usage.heapTotal / 1024 / 1024),\n      external: Math.round(usage.external / 1024 / 1024),\n      rss: Math.round(usage.rss / 1024 / 1024)\n    };\n  },\n\n  startMonitoring: () => {\n    setInterval(() => {\n      const memory = resourceMonitor.checkMemoryUsage();\n      console.log(`[MEMORY] Heap: ${memory.heapUsed}MB/${memory.heapTotal}MB, RSS: ${memory.rss}MB`);\n    }, productionConfig.monitoring.healthCheckInterval);\n  }\n};\n\nexport default productionConfig;\n", "\nimport { Server } from 'http';\nimport HealthChecker from '../health/health-check';\n\nexport class GracefulShutdown {\n  private server: Server | null = null;\n  private healthChecker: HealthChecker | null = null;\n  private shutdownTimeout: NodeJS.Timeout | null = null;\n  private isShuttingDown = false;\n\n  constructor(server: Server) {\n    this.server = server;\n    this.healthChecker = HealthChecker.getInstance();\n    this.setupSignalHandlers();\n  }\n\n  private setupSignalHandlers(): void {\n    // Handle graceful shutdown signals\n    process.on('SIGTERM', () => {\n      console.log('[SHUTDOWN] Received SIGTERM signal');\n      this.shutdown('SIGTERM');\n    });\n\n    process.on('SIGINT', () => {\n      console.log('[SHUTDOWN] Received SIGINT signal');\n      this.shutdown('SIGINT');\n    });\n\n    process.on('SIGUSR2', () => {\n      console.log('[SHUTDOWN] Received SIGUSR2 signal (nodemon restart)');\n      this.shutdown('SIGUSR2');\n    });\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', (error) => {\n      console.error('[SHUTDOWN] Uncaught Exception:', error);\n      this.forceShutdown(error);\n    });\n\n    // Handle unhandled promise rejections\n    process.on('unhandledRejection', (reason, promise) => {\n      console.error('[SHUTDOWN] Unhandled Rejection at:', promise, 'reason:', reason);\n      this.forceShutdown(new Error(`Unhandled Rejection: ${reason}`));\n    });\n\n    // Handle warnings\n    process.on('warning', (warning) => {\n      console.warn('[WARNING]', warning.name, warning.message);\n      if (warning.stack) {\n        console.warn('[WARNING] Stack:', warning.stack);\n      }\n    });\n  }\n\n  private async shutdown(signal: string): Promise<void> {\n    if (this.isShuttingDown) {\n      console.log('[SHUTDOWN] Already shutting down, ignoring signal');\n      return;\n    }\n\n    this.isShuttingDown = true;\n    console.log(`[SHUTDOWN] Starting graceful shutdown (${signal})`);\n\n    // Set shutdown timeout\n    this.shutdownTimeout = setTimeout(() => {\n      console.error('[SHUTDOWN] Graceful shutdown timeout, forcing exit');\n      process.exit(1);\n    }, 10000); // 10 seconds timeout\n\n    try {\n      // Step 1: Stop accepting new connections\n      if (this.server) {\n        console.log('[SHUTDOWN] Closing HTTP server');\n        this.server.close(() => {\n          console.log('[SHUTDOWN] HTTP server closed');\n        });\n      }\n\n      // Step 2: Stop health checks\n      if (this.healthChecker) {\n        console.log('[SHUTDOWN] Stopping health checks');\n        this.healthChecker.stopPeriodicHealthChecks();\n      }\n\n      // Step 3: Wait for active connections to finish\n      await this.waitForActiveConnections();\n\n      // Step 4: Cleanup resources\n      await this.cleanup();\n\n      console.log('[SHUTDOWN] Graceful shutdown completed');\n      \n      if (this.shutdownTimeout) {\n        clearTimeout(this.shutdownTimeout);\n      }\n      \n      process.exit(0);\n    } catch (error) {\n      console.error('[SHUTDOWN] Error during graceful shutdown:', error);\n      this.forceShutdown(error);\n    }\n  }\n\n  private async waitForActiveConnections(): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.server) {\n        resolve();\n        return;\n      }\n\n      const checkConnections = () => {\n        // @ts-ignore - accessing internal property\n        const connections = this.server._connections || 0;\n        \n        if (connections === 0) {\n          console.log('[SHUTDOWN] All connections closed');\n          resolve();\n        } else {\n          console.log(`[SHUTDOWN] Waiting for ${connections} active connections`);\n          setTimeout(checkConnections, 1000);\n        }\n      };\n\n      checkConnections();\n    });\n  }\n\n  private async cleanup(): Promise<void> {\n    console.log('[SHUTDOWN] Performing cleanup tasks');\n    \n    try {\n      // Clean up temporary files\n      const fs = await import('fs/promises');\n      const tempDir = './storage/temp';\n      \n      try {\n        const files = await fs.readdir(tempDir);\n        for (const file of files) {\n          if (file.startsWith('temp_') || file.includes('_tmp')) {\n            await fs.unlink(`${tempDir}/${file}`);\n            console.log(`[CLEANUP] Removed temp file: ${file}`);\n          }\n        }\n      } catch (error) {\n        console.warn('[CLEANUP] Could not clean temp files:', error);\n      }\n\n      // Clear any intervals or timeouts\n      if (global.gc) {\n        global.gc();\n        console.log('[CLEANUP] Manual garbage collection triggered');\n      }\n\n      console.log('[SHUTDOWN] Cleanup completed');\n    } catch (error) {\n      console.error('[SHUTDOWN] Error during cleanup:', error);\n    }\n  }\n\n  private forceShutdown(error: Error): void {\n    console.error('[SHUTDOWN] Force shutdown due to error:', error);\n    \n    if (this.shutdownTimeout) {\n      clearTimeout(this.shutdownTimeout);\n    }\n    \n    // Log the error for debugging\n    console.error('[SHUTDOWN] Stack trace:', error.stack);\n    \n    // Force exit\n    process.exit(1);\n  }\n}\n\nexport default GracefulShutdown;\n", "\nimport { Router } from 'express';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\nimport { spawn } from 'child_process';\n\nconst router = Router();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: path.join(process.cwd(), 'storage', 'temp'),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Security: Only allow audio files\n    const allowedTypes = ['audio/mpeg', 'audio/wav', 'audio/flac', 'audio/ogg', 'audio/aac'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only audio files are allowed.'));\n    }\n  },\n});\n\n// Extract voice features endpoint\nrouter.post('/extract-features', upload.single('audio'), async (req, res) => {\n  try {\n    const { voiceId } = req.body;\n    const audioFile = req.file;\n\n    if (!audioFile || !voiceId) {\n      return res.status(400).json({ \n        error: 'Audio file and voice ID are required' \n      });\n    }\n\n    // Input validation\n    if (!/^[a-zA-Z0-9_-]+$/.test(voiceId)) {\n      return res.status(400).json({ \n        error: 'Invalid voice ID format' \n      });\n    }\n\n    // Execute RVC feature extraction\n    const result = await executeRVCScript([\n      '--action', 'extract',\n      '--audio', audioFile.path,\n      '--voice-id', voiceId\n    ]);\n\n    // Clean up temp file\n    await fs.unlink(audioFile.path);\n\n    if (result.success) {\n      res.json({\n        success: true,\n        voiceId: result.voice_id,\n        features: {\n          f0Path: result.f0_path,\n          contentPath: result.content_path,\n          embeddingPath: result.embedding_path\n        },\n        message: 'Voice features extracted successfully'\n      });\n    } else {\n      res.status(500).json({ \n        error: 'Feature extraction failed',\n        details: result.error \n      });\n    }\n  } catch (error) {\n    console.error('Voice feature extraction error:', error);\n    res.status(500).json({ \n      error: 'Voice feature extraction failed',\n      details: error.message \n    });\n  }\n});\n\n// Voice synthesis endpoint\nrouter.post('/synthesize', async (req, res) => {\n  try {\n    const { text, voiceId, style = 'natural' } = req.body;\n\n    // Input validation\n    if (!text || !voiceId) {\n      return res.status(400).json({ \n        error: 'Text and voice ID are required for synthesis' \n      });\n    }\n\n    // Sanitize inputs\n    const sanitizedText = text.replace(/[<>]/g, '').trim();\n    if (sanitizedText.length === 0 || sanitizedText.length > 1000) {\n      return res.status(400).json({ \n        error: 'Text must be between 1 and 1000 characters' \n      });\n    }\n\n    // Execute RVC voice cloning\n    const result = await executeRVCScript([\n      '--action', 'clone',\n      '--voice-id', voiceId,\n      '--text', sanitizedText\n    ]);\n\n    if (result.success) {\n      res.json({\n        success: true,\n        audioUrl: `/storage/voices/${path.basename(result.audio_path)}`,\n        voiceId: result.voice_id,\n        message: 'Voice synthesized successfully'\n      });\n    } else {\n      res.status(500).json({ \n        error: 'Voice synthesis failed',\n        details: result.error \n      });\n    }\n  } catch (error) {\n    console.error('Voice synthesis error:', error);\n    res.status(500).json({ \n      error: 'Voice synthesis failed',\n      details: error.message \n    });\n  }\n});\n\n// Get available voices\nrouter.get('/available', async (req, res) => {\n  try {\n    const result = await executeRVCScript(['--action', 'list']);\n    \n    if (Array.isArray(result)) {\n      res.json({ voices: result });\n    } else {\n      res.json({ voices: [] });\n    }\n  } catch (error) {\n    console.error('Error fetching voices:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch available voices',\n      details: error.message \n    });\n  }\n});\n\n// Voice model training endpoint\nrouter.post('/train', upload.array('audio_files', 10), async (req, res) => {\n  try {\n    const { voiceId, epochs = 100 } = req.body;\n    const audioFiles = req.files as Express.Multer.File[];\n\n    if (!voiceId || !audioFiles || audioFiles.length === 0) {\n      return res.status(400).json({ \n        error: 'Voice ID and audio files are required for training' \n      });\n    }\n\n    // Validate file count\n    if (audioFiles.length > 10) {\n      return res.status(400).json({ \n        error: 'Maximum 10 audio files allowed for training' \n      });\n    }\n\n    // Create training directory\n    const trainingDir = path.join(\n      process.cwd(), \n      'storage', \n      'voices', \n      'training', \n      `${voiceId}_${Date.now()}`\n    );\n    await fs.mkdir(trainingDir, { recursive: true });\n\n    // Move uploaded files to training directory\n    const trainingFiles = [];\n    for (const file of audioFiles) {\n      const destPath = path.join(trainingDir, file.originalname);\n      await fs.rename(file.path, destPath);\n      trainingFiles.push(destPath);\n    }\n\n    // Start training process (async)\n    const trainingId = path.basename(trainingDir);\n    startTrainingProcess(voiceId, trainingDir, parseInt(epochs));\n\n    res.json({\n      success: true,\n      message: 'Voice training started',\n      trainingId,\n      filesProcessed: trainingFiles.length\n    });\n  } catch (error) {\n    console.error('Voice training error:', error);\n    res.status(500).json({ \n      error: 'Voice training failed',\n      details: error.message \n    });\n  }\n});\n\n// Training status endpoint\nrouter.get('/training/:trainingId/status', async (req, res) => {\n  try {\n    const { trainingId } = req.params;\n    \n    // Check training status\n    const trainingDir = path.join(\n      process.cwd(), \n      'storage', \n      'voices', \n      'training', \n      trainingId\n    );\n    \n    const statusFile = path.join(trainingDir, 'status.json');\n    \n    try {\n      const statusData = await fs.readFile(statusFile, 'utf-8');\n      const status = JSON.parse(statusData);\n      res.json(status);\n    } catch {\n      res.json({ \n        status: 'not_found',\n        message: 'Training session not found'\n      });\n    }\n  } catch (error) {\n    console.error('Error checking training status:', error);\n    res.status(500).json({ \n      error: 'Failed to check training status',\n      details: error.message \n    });\n  }\n});\n\n// Helper function to execute RVC script\nasync function executeRVCScript(args: string[]): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const scriptPath = path.join(process.cwd(), 'server', 'rvc-integration.py');\n    const pythonProcess = spawn('python3', [scriptPath, ...args]);\n    \n    let stdout = '';\n    let stderr = '';\n\n    pythonProcess.stdout.on('data', (data) => {\n      stdout += data.toString();\n    });\n\n    pythonProcess.stderr.on('data', (data) => {\n      stderr += data.toString();\n    });\n\n    pythonProcess.on('close', (code) => {\n      if (code === 0) {\n        try {\n          const result = JSON.parse(stdout.trim());\n          resolve(result);\n        } catch (error) {\n          reject(new Error('Failed to parse RVC output'));\n        }\n      } else {\n        reject(new Error(stderr || 'RVC script execution failed'));\n      }\n    });\n\n    pythonProcess.on('error', (error) => {\n      reject(error);\n    });\n  });\n}\n\n// Helper function to start training process\nasync function startTrainingProcess(voiceId: string, trainingDir: string, epochs: number) {\n  try {\n    const statusFile = path.join(trainingDir, 'status.json');\n    \n    // Update status to training\n    await fs.writeFile(statusFile, JSON.stringify({\n      status: 'training',\n      voiceId,\n      progress: 0,\n      epochs,\n      startTime: new Date().toISOString()\n    }));\n\n    // Simulate training process\n    setTimeout(async () => {\n      try {\n        // Update status to completed\n        await fs.writeFile(statusFile, JSON.stringify({\n          status: 'completed',\n          voiceId,\n          progress: 100,\n          epochs,\n          startTime: new Date().toISOString(),\n          completedTime: new Date().toISOString()\n        }));\n        \n        console.log(`Training completed for voice: ${voiceId}`);\n      } catch (error) {\n        console.error('Training completion error:', error);\n      }\n    }, 30000); // 30 seconds for demo\n  } catch (error) {\n    console.error('Training process error:', error);\n  }\n}\n\nexport default router;\n", "\nimport { Router } from 'express';\nimport { MidiService } from '../midi-service.js';\nimport path from 'path';\nimport fs from 'fs/promises';\n\nconst router = Router();\nconst midiService = new MidiService();\n\n// Generate MIDI endpoint\nrouter.post('/generate', async (req, res) => {\n  try {\n    const { title, theme, genre, tempo, duration, useAiLyrics } = req.body;\n\n    if (!title || !theme || !genre || !tempo) {\n      return res.status(400).json({ \n        error: 'Missing required fields: title, theme, genre, tempo' \n      });\n    }\n\n    const result = await midiService.generateMidi({\n      title,\n      theme,\n      genre,\n      tempo: parseInt(tempo),\n      duration: duration ? parseInt(duration) : undefined,\n      useAiLyrics: Boolean(useAiLyrics)\n    });\n\n    if (result.success) {\n      res.json({\n        success: true,\n        midiPath: result.midiPath,\n        metadataPath: result.metadataPath,\n        message: 'MIDI generated successfully'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    console.error('MIDI generation error:', error);\n    res.status(500).json({ \n      error: `MIDI generation failed: ${error}` \n    });\n  }\n});\n\n// List generated MIDI files\nrouter.get('/list', async (req, res) => {\n  try {\n    const midiFiles = await midiService.listGeneratedMidi();\n    res.json({ files: midiFiles });\n  } catch (error) {\n    console.error('Error listing MIDI files:', error);\n    res.status(500).json({ error: `Failed to list MIDI files: ${error}` });\n  }\n});\n\n// Get MIDI metadata\nrouter.get('/:filename/metadata', async (req, res) => {\n  try {\n    const filename = req.params.filename;\n    const midiPath = path.join('./storage/midi/generated', filename);\n    const metadata = await midiService.getMidiMetadata(midiPath);\n\n    if (metadata) {\n      res.json(metadata);\n    } else {\n      res.status(404).json({ error: 'Metadata not found' });\n    }\n  } catch (error) {\n    console.error('Error getting metadata:', error);\n    res.status(500).json({ error: `Failed to get metadata: ${error}` });\n  }\n});\n\n// Extract groove dataset\nrouter.post('/groove/extract', async (req, res) => {\n  try {\n    const result = await midiService.extractGrooveDataset();\n    \n    if (result.success) {\n      res.json({\n        success: true,\n        message: 'Groove dataset extracted successfully',\n        catalogPath: result.catalogPath\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: result.error\n      });\n    }\n  } catch (error) {\n    console.error('Groove extraction error:', error);\n    res.status(500).json({ error: `Groove extraction failed: ${error}` });\n  }\n});\n\n// Get grooves by style\nrouter.get('/groove/style/:style', async (req, res) => {\n  try {\n    const style = req.params.style;\n    const grooves = await midiService.getGroovesByStyle(style);\n    res.json({ style, grooves });\n  } catch (error) {\n    console.error('Error getting grooves by style:', error);\n    res.status(500).json({ error: `Failed to get grooves: ${error}` });\n  }\n});\n\n// Get grooves by tempo range\nrouter.get('/groove/tempo/:minTempo/:maxTempo', async (req, res) => {\n  try {\n    const minTempo = parseInt(req.params.minTempo);\n    const maxTempo = parseInt(req.params.maxTempo);\n    \n    if (isNaN(minTempo) || isNaN(maxTempo)) {\n      return res.status(400).json({ error: 'Invalid tempo values' });\n    }\n    \n    const grooves = await midiService.getGroovesByTempo(minTempo, maxTempo);\n    res.json({ tempoRange: { min: minTempo, max: maxTempo }, grooves });\n  } catch (error) {\n    console.error('Error getting grooves by tempo:', error);\n    res.status(500).json({ error: `Failed to get grooves: ${error}` });\n  }\n});\n\nexport default router;\n", "\nimport { Router } from 'express';\nimport { AudioLDM2Service } from '../audioldm2-service.js';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport multer from 'multer';\n\nconst router = Router();\nconst audioldm2Service = new AudioLDM2Service();\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: path.join(process.cwd(), 'storage', 'temp'),\n  limits: {\n    fileSize: 100 * 1024 * 1024, // 100MB limit\n  },\n});\n\n// Generate personalized music\nrouter.post('/generate', async (req, res) => {\n  try {\n    const { prompt, instanceWord, objectClass, audioLength = 10.0 } = req.body;\n    \n    if (!prompt) {\n      return res.status(400).json({ error: 'Prompt is required' });\n    }\n\n    const outputDir = path.join(process.cwd(), 'storage', 'music', 'generated');\n    await fs.mkdir(outputDir, { recursive: true });\n\n    const config = {\n      modelPath: 'cvssp/audioldm2',\n      outputDir,\n      instanceWord,\n      objectClass,\n      audioLengthInS: audioLength,\n    };\n\n    const audioFile = await audioldm2Service.generatePersonalizedMusic(prompt, config);\n    \n    res.json({\n      success: true,\n      audioFile: path.basename(audioFile),\n      message: 'Music generated successfully'\n    });\n    \n  } catch (error) {\n    console.error('AudioLDM2 generation error:', error);\n    res.status(500).json({ \n      error: 'Failed to generate music',\n      details: error.message \n    });\n  }\n});\n\n// Train a personalized model\nrouter.post('/train', upload.array('audio_files'), async (req, res) => {\n  try {\n    const { instanceWord, objectClass, maxTrainSteps = 300 } = req.body;\n    \n    if (!instanceWord || !objectClass) {\n      return res.status(400).json({ \n        error: 'Instance word and object class are required' \n      });\n    }\n\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({ \n        error: 'Audio files are required for training' \n      });\n    }\n\n    // Create training directory\n    const trainingDir = path.join(\n      process.cwd(), \n      'storage', \n      'models', \n      'training', \n      `${instanceWord}_${objectClass}_${Date.now()}`\n    );\n    await fs.mkdir(trainingDir, { recursive: true });\n\n    // Move uploaded files to training directory\n    const files = req.files as Express.Multer.File[];\n    for (const file of files) {\n      const destPath = path.join(trainingDir, file.originalname);\n      await fs.rename(file.path, destPath);\n    }\n\n    const outputDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2', `${instanceWord}_${objectClass}`);\n    \n    const config = {\n      dataDir: trainingDir,\n      instanceWord,\n      objectClass,\n      outputDir,\n      maxTrainSteps: parseInt(maxTrainSteps),\n    };\n\n    // Start training (this will run in background)\n    audioldm2Service.trainDreamBooth(config)\n      .then(modelPath => {\n        console.log('Training completed:', modelPath);\n      })\n      .catch(error => {\n        console.error('Training failed:', error);\n      });\n\n    res.json({\n      success: true,\n      message: 'Training started successfully',\n      trainingId: path.basename(outputDir)\n    });\n    \n  } catch (error) {\n    console.error('Training error:', error);\n    res.status(500).json({ \n      error: 'Failed to start training',\n      details: error.message \n    });\n  }\n});\n\n// Get available models\nrouter.get('/models', async (req, res) => {\n  try {\n    const models = await audioldm2Service.getAvailableModels();\n    res.json({ models });\n  } catch (error) {\n    console.error('Error fetching models:', error);\n    res.status(500).json({ \n      error: 'Failed to fetch models',\n      details: error.message \n    });\n  }\n});\n\n// Get training status\nrouter.get('/training/:trainingId/status', async (req, res) => {\n  try {\n    const { trainingId } = req.params;\n    const modelDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2', trainingId);\n    \n    try {\n      await fs.access(path.join(modelDir, 'trained_pipeline'));\n      res.json({ status: 'completed' });\n    } catch {\n      // Check if training is in progress\n      try {\n        await fs.access(modelDir);\n        res.json({ status: 'training' });\n      } catch {\n        res.json({ status: 'not_found' });\n      }\n    }\n  } catch (error) {\n    console.error('Error checking training status:', error);\n    res.status(500).json({ \n      error: 'Failed to check training status',\n      details: error.message \n    });\n  }\n});\n\nexport default router;\n", "\nimport { spawn } from 'child_process';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\n\ninterface AudioLDM2Config {\n  modelPath: string;\n  outputDir: string;\n  instanceWord?: string;\n  objectClass?: string;\n  audioLengthInS?: number;\n  maxTrainSteps?: number;\n  dataDir?: string;\n}\n\ninterface GenerationResult {\n  success: boolean;\n  audioPath?: string;\n  error?: string;\n  metadata?: any;\n}\n\nexport class AudioLDM2Service {\n  private pythonPath: string;\n  private modelPath: string;\n  private outputDir: string;\n\n  constructor() {\n    this.pythonPath = process.env.AUDIOLDM2_PYTHON_PATH || 'python3';\n    this.modelPath = process.env.AUDIOLDM2_MODEL_PATH || 'cvssp/audioldm2';\n    this.outputDir = path.join(process.cwd(), 'storage', 'music', 'generated');\n    \n    // Ensure output directory exists\n    this.ensureOutputDir();\n  }\n\n  private async ensureOutputDir(): Promise<void> {\n    try {\n      await fs.mkdir(this.outputDir, { recursive: true });\n    } catch (error) {\n      console.error('Failed to create output directory:', error);\n    }\n  }\n\n  async generatePersonalizedMusic(prompt: string, config: AudioLDM2Config): Promise<string> {\n    const timestamp = Date.now();\n    const outputFileName = `audioldm2_${timestamp}.wav`;\n    const outputPath = path.join(config.outputDir, outputFileName);\n\n    try {\n      // Create AudioLDM2 generation script\n      const scriptPath = await this.createGenerationScript(prompt, config, outputPath);\n      \n      // Execute generation\n      const result = await this.executeAudioLDM2Script(scriptPath);\n      \n      if (result.success) {\n        // Verify output file exists\n        const fileExists = await this.fileExists(outputPath);\n        if (fileExists) {\n          console.log(`AudioLDM2 generation successful: ${outputPath}`);\n          return outputPath;\n        } else {\n          throw new Error('Generated audio file not found');\n        }\n      } else {\n        throw new Error(result.error || 'AudioLDM2 generation failed');\n      }\n    } catch (error) {\n      console.error('AudioLDM2 generation error:', error);\n      throw error;\n    }\n  }\n\n  private async createGenerationScript(prompt: string, config: AudioLDM2Config, outputPath: string): Promise<string> {\n    const scriptContent = `\nimport torch\nimport numpy as np\nimport soundfile as sf\nfrom pathlib import Path\nimport sys\nimport json\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass AudioLDM2Generator:\n    def __init__(self, model_path=\"${config.modelPath}\"):\n        self.model_path = model_path\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        logger.info(f\"Using device: {self.device}\")\n        \n    def generate_audio(self, prompt, output_path, audio_length=${config.audioLengthInS || 10.0}):\n        \"\"\"Generate audio using AudioLDM2 pipeline\"\"\"\n        try:\n            # Mock AudioLDM2 generation - replace with actual implementation\n            # In production, this would use the diffusers AudioLDM2 pipeline\n            \n            # For now, generate white noise with envelope\n            duration = audio_length\n            sample_rate = 16000\n            samples = int(duration * sample_rate)\n            \n            # Generate base audio\n            audio = np.random.randn(samples) * 0.1\n            \n            # Apply envelope\n            envelope = np.hanning(samples)\n            audio = audio * envelope\n            \n            # Apply frequency shaping based on prompt\n            if 'bass' in prompt.lower():\n                # Emphasize lower frequencies\n                audio = self.apply_low_pass_filter(audio, sample_rate, 800)\n            elif 'treble' in prompt.lower() or 'high' in prompt.lower():\n                # Emphasize higher frequencies\n                audio = self.apply_high_pass_filter(audio, sample_rate, 1000)\n            \n            # Normalize\n            audio = audio / np.max(np.abs(audio))\n            \n            # Save audio\n            sf.write(output_path, audio, sample_rate)\n            logger.info(f\"Generated audio saved to {output_path}\")\n            \n            return {\n                \"success\": True,\n                \"output_path\": output_path,\n                \"duration\": duration,\n                \"sample_rate\": sample_rate\n            }\n            \n        except Exception as e:\n            logger.error(f\"Audio generation failed: {e}\")\n            return {\"success\": False, \"error\": str(e)}\n    \n    def apply_low_pass_filter(self, audio, sample_rate, cutoff_freq):\n        \"\"\"Apply simple low-pass filter\"\"\"\n        try:\n            # Simple moving average filter\n            window_size = int(sample_rate / cutoff_freq)\n            filtered = np.convolve(audio, np.ones(window_size)/window_size, mode='same')\n            return filtered\n        except:\n            return audio\n    \n    def apply_high_pass_filter(self, audio, sample_rate, cutoff_freq):\n        \"\"\"Apply simple high-pass filter\"\"\"\n        try:\n            # Simple difference filter\n            filtered = np.diff(audio, prepend=audio[0])\n            return filtered\n        except:\n            return audio\n\ndef main():\n    generator = AudioLDM2Generator()\n    \n    prompt = \"${prompt}\"\n    output_path = \"${outputPath}\"\n    audio_length = ${config.audioLengthInS || 10.0}\n    \n    result = generator.generate_audio(prompt, output_path, audio_length)\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n`;\n\n    const scriptPath = path.join(this.outputDir, `audioldm2_script_${Date.now()}.py`);\n    await fs.writeFile(scriptPath, scriptContent);\n    return scriptPath;\n  }\n\n  private async executeAudioLDM2Script(scriptPath: string): Promise<GenerationResult> {\n    return new Promise((resolve) => {\n      const process = spawn(this.pythonPath, [scriptPath]);\n      let stdout = '';\n      let stderr = '';\n\n      process.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      process.on('close', (code) => {\n        if (code === 0) {\n          try {\n            const result = JSON.parse(stdout.trim());\n            resolve(result);\n          } catch (error) {\n            resolve({ success: false, error: 'Failed to parse generation result' });\n          }\n        } else {\n          resolve({ success: false, error: stderr || 'AudioLDM2 generation failed' });\n        }\n      });\n\n      process.on('error', (error) => {\n        resolve({ success: false, error: error.message });\n      });\n    });\n  }\n\n  async trainDreamBooth(config: AudioLDM2Config): Promise<string> {\n    const timestamp = Date.now();\n    const outputDir = path.join(config.outputDir, `model_${timestamp}`);\n    \n    try {\n      await fs.mkdir(outputDir, { recursive: true });\n      \n      // Create training script\n      const scriptPath = await this.createTrainingScript(config, outputDir);\n      \n      // Execute training\n      const result = await this.executeTrainingScript(scriptPath);\n      \n      if (result.success) {\n        console.log(`DreamBooth training completed: ${outputDir}`);\n        return outputDir;\n      } else {\n        throw new Error(result.error || 'DreamBooth training failed');\n      }\n    } catch (error) {\n      console.error('DreamBooth training error:', error);\n      throw error;\n    }\n  }\n\n  private async createTrainingScript(config: AudioLDM2Config, outputDir: string): Promise<string> {\n    const scriptContent = `\nimport torch\nimport os\nimport json\nimport logging\nfrom pathlib import Path\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass DreamBoothTrainer:\n    def __init__(self, data_dir=\"${config.dataDir}\", output_dir=\"${outputDir}\"):\n        self.data_dir = Path(data_dir)\n        self.output_dir = Path(output_dir)\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        \n    def train_model(self, instance_word=\"${config.instanceWord}\", object_class=\"${config.objectClass}\", max_steps=${config.maxTrainSteps || 300}):\n        \"\"\"Train DreamBooth model\"\"\"\n        try:\n            # Mock training process\n            logger.info(f\"Starting DreamBooth training for {instance_word} {object_class}\")\n            \n            # Create model directory structure\n            model_dir = self.output_dir / \"trained_pipeline\"\n            model_dir.mkdir(parents=True, exist_ok=True)\n            \n            # Create training metadata\n            metadata = {\n                \"instance_word\": instance_word,\n                \"object_class\": object_class,\n                \"max_steps\": max_steps,\n                \"training_complete\": True,\n                \"model_path\": str(model_dir)\n            }\n            \n            with open(model_dir / \"metadata.json\", \"w\") as f:\n                json.dump(metadata, f, indent=2)\n            \n            logger.info(\"DreamBooth training completed successfully\")\n            return {\"success\": True, \"model_path\": str(model_dir)}\n            \n        except Exception as e:\n            logger.error(f\"Training failed: {e}\")\n            return {\"success\": False, \"error\": str(e)}\n\ndef main():\n    trainer = DreamBoothTrainer()\n    result = trainer.train_model()\n    print(json.dumps(result))\n\nif __name__ == \"__main__\":\n    main()\n`;\n\n    const scriptPath = path.join(outputDir, 'train_dreambooth.py');\n    await fs.writeFile(scriptPath, scriptContent);\n    return scriptPath;\n  }\n\n  private async executeTrainingScript(scriptPath: string): Promise<GenerationResult> {\n    return new Promise((resolve) => {\n      const process = spawn(this.pythonPath, [scriptPath]);\n      let stdout = '';\n      let stderr = '';\n\n      process.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      process.on('close', (code) => {\n        if (code === 0) {\n          try {\n            const result = JSON.parse(stdout.trim());\n            resolve(result);\n          } catch (error) {\n            resolve({ success: false, error: 'Failed to parse training result' });\n          }\n        } else {\n          resolve({ success: false, error: stderr || 'Training failed' });\n        }\n      });\n\n      process.on('error', (error) => {\n        resolve({ success: false, error: error.message });\n      });\n    });\n  }\n\n  async getAvailableModels(): Promise<string[]> {\n    try {\n      const modelsDir = path.join(process.cwd(), 'storage', 'models', 'audioldm2');\n      await fs.mkdir(modelsDir, { recursive: true });\n      \n      const entries = await fs.readdir(modelsDir, { withFileTypes: true });\n      const models = entries\n        .filter(entry => entry.isDirectory())\n        .map(entry => entry.name);\n      \n      return models;\n    } catch (error) {\n      console.error('Failed to get available models:', error);\n      return [];\n    }\n  }\n\n  private async fileExists(filePath: string): Promise<boolean> {\n    try {\n      await fs.access(filePath);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"],
  "mappings": "skBAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,aAAAE,KAAA,eAAAC,GAAAH,IAAA,IAAAI,EAAoB,sBACpBC,EAAiB,mBACjBC,EAAiB,mBACjBC,GAA8B,eAC9BC,GAAmB,qBACnBC,GAAmB,qBACnBH,GAA8B,gBAG9BI,GAAmB,qBACnBC,GAAsB,iCCTtB,IAAAC,EAAsB,yBACtBC,EAA+B,cAC/BC,EAAiB,mBA2BJC,EAAN,KAAkB,CAGf,WAAa,UACb,gBAAkB,4BAClB,UAAY,2BACZ,aAAe,2BAKvB,MAAM,aAAaC,EAA+D,CAChF,GAAI,CAGF,MAAM,EAAAC,SAAG,MAAM,KAAK,UAAW,CAAE,UAAW,EAAK,CAAC,EAIlD,IAAMC,EAAY,KAAK,IAAI,EACrBC,EAAiBH,EAAQ,MAAM,QAAQ,gBAAiB,GAAG,EAC3DI,EAAa,EAAAC,QAAK,KAAK,KAAK,UAAW,GAAGF,CAAc,IAAID,CAAS,MAAM,EAK3EI,EAAe,CACnB,sCACA,UAAWN,EAAQ,MACnB,UAAWA,EAAQ,MACnB,UAAWA,EAAQ,MACnB,UAAWA,EAAQ,MAAM,SAAS,EAClC,WAAYI,CACd,EAEIJ,EAAQ,aACVM,EAAa,KAAK,aAAa,EAG7BN,EAAQ,UACVM,EAAa,KAAK,aAAcN,EAAQ,SAAS,SAAS,CAAC,EAGzDA,EAAQ,SACVM,EAAa,KAAK,aAAcN,EAAQ,OAAO,EAIjD,IAAMO,EAAS,MAAM,KAAK,oBAAoBD,CAAY,EAE1D,GAAIC,EAAO,QAAS,CAElB,IAAMC,EAAa,MAAM,KAAK,WAAWJ,CAAU,EAC7CK,EAAeL,EAAW,QAAQ,OAAQ,gBAAgB,EAC1DM,EAAiB,MAAM,KAAK,WAAWD,CAAY,EAEzD,MAAO,CACL,QAASD,EACT,SAAUA,EAAaJ,EAAa,OACpC,aAAcM,EAAiBD,EAAe,OAC9C,MAAOD,EAAa,OAAY,6BAClC,CACF,KACE,OAAO,CACL,QAAS,GACT,MAAOD,EAAO,KAChB,CAEJ,OAASI,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,2BAA2BA,CAAK,EACzC,CACF,CACF,CAEA,MAAc,oBAAoBC,EAA+D,CAC/F,OAAO,IAAI,QAASC,GAAY,CAC9B,IAAMC,KAAe,SAAM,KAAK,WAAYF,CAAI,EAC5CG,EAAS,GACTC,EAAS,GAEbF,EAAa,OAAO,GAAG,OAASG,GAAS,CACvCD,GAAUC,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAa,OAAO,GAAG,OAASG,GAAS,CACvCF,GAAUE,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAa,GAAG,QAAUI,GAAS,CAE/BL,EADEK,IAAS,EACH,CAAE,QAAS,EAAK,EAEhB,CACN,QAAS,GACT,MAAO,4BAA4BA,CAAI,YAAYH,CAAM,EAC3D,CALyB,CAO7B,CAAC,EAEDD,EAAa,GAAG,QAAUH,GAAU,CAClCE,EAAQ,CACN,QAAS,GACT,MAAO,4BAA4BF,EAAM,OAAO,EAClD,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAEA,MAAc,WAAWQ,EAAoC,CAC3D,GAAI,CACF,aAAM,EAAAlB,SAAG,OAAOkB,CAAQ,EACjB,EACT,MAAQ,CACN,MAAO,EACT,CACF,CAEA,MAAM,mBAAuC,CAC3C,GAAI,CAEF,OADc,MAAM,EAAAlB,SAAG,QAAQ,KAAK,SAAS,GAChC,OAAOmB,GAAQA,EAAK,SAAS,MAAM,CAAC,CACnD,MAAQ,CACN,MAAO,CAAC,CACV,CACF,CAEA,MAAM,gBAAgBC,EAAgC,CACpD,GAAI,CACF,IAAMZ,EAAeY,EAAS,QAAQ,OAAQ,gBAAgB,EACxDC,EAAW,MAAM,EAAArB,SAAG,SAASQ,EAAc,OAAO,EACxD,OAAO,KAAK,MAAMa,CAAQ,CAC5B,MAAQ,CACN,OAAO,IACT,CACF,CAEA,MAAM,mBAAuC,CAC3C,GAAI,CAEF,OADc,MAAM,EAAArB,SAAG,QAAQ,KAAK,YAAY,GACnC,OAAOmB,GAAQA,EAAK,SAAS,MAAM,GAAKA,EAAK,SAAS,OAAO,CAAC,CAC7E,MAAQ,CACN,MAAO,CAAC,CACV,CACF,CAEA,MAAM,qBAAqBG,EAAsBC,EAAqD,CACpG,GAAI,CACF,IAAMC,EAAe,EAAApB,QAAK,KAAK,KAAK,aAAckB,CAAY,EAG9D,GAAI,CAFW,MAAM,KAAK,WAAWE,CAAY,EAG/C,MAAO,CACL,QAAS,GACT,MAAO,YAAYF,CAAY,YACjC,EAIF,IAAMrB,EAAY,KAAK,IAAI,EACrBwB,EAAWH,EAAa,QAAQ,gBAAiB,EAAE,EACnDnB,EAAa,EAAAC,QAAK,KAAK,KAAK,UAAW,GAAGqB,CAAQ,WAAWxB,CAAS,MAAM,EAGlF,MAAM,EAAAD,SAAG,SAASwB,EAAcrB,CAAU,EAG1C,IAAMkB,EAAW,CACf,gBAAiBC,EACjB,aAAc,IAAI,KAAK,EAAE,YAAY,EACrC,eAAgBC,GAAkB,CAAC,EACnC,kBAAmB,gBACrB,EAEMf,EAAeL,EAAW,QAAQ,OAAQ,gBAAgB,EAChE,aAAM,EAAAH,SAAG,UAAUQ,EAAc,KAAK,UAAUa,EAAU,KAAM,CAAC,CAAC,EAE3D,CACL,QAAS,GACT,SAAUlB,EACV,aAAcK,CAChB,CACF,OAASE,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,+BAA+BA,CAAK,EAC7C,CACF,CACF,CAEA,MAAM,kBAAwF,CAC5F,GAAI,CACF,IAAMJ,EAAS,MAAM,KAAK,oBAAoB,CAC5C,2BACA,QACF,CAAC,EAED,OAAIA,EAAO,QACF,CACL,QAAS,GACT,YAAa,4CACf,EAEO,CACL,QAAS,GACT,MAAOA,EAAO,KAChB,CAEJ,OAASI,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,8BAA8BA,CAAK,EAC5C,CACF,CACF,CAEA,MAAM,sBAA4F,CAChG,GAAI,CACF,IAAMJ,EAAS,MAAM,KAAK,oBAAoB,CAC5C,oCACA,WACF,CAAC,EAED,OAAIA,EAAO,QACF,CACL,QAAS,GACT,YAAa,oDACf,EAEO,CACL,QAAS,GACT,MAAOA,EAAO,KAChB,CAEJ,OAASI,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,qCAAqCA,CAAK,EACnD,CACF,CACF,CAEA,MAAM,kBAAkBgB,EAA+B,CACrD,GAAI,CAMF,OALe,MAAM,KAAK,oBAAoB,CAC5C,oCACA,UAAWA,CACb,CAAC,GAEU,QAEF,CAAC,EAED,CAAC,CAEZ,MAAgB,CACd,MAAO,CAAC,CACV,CACF,CAEA,MAAM,kBAAkBC,EAAkBC,EAAkC,CAC1E,GAAI,CAOF,OANe,MAAM,KAAK,oBAAoB,CAC5C,oCACA,cAAeD,EAAS,SAAS,EACjC,cAAeC,EAAS,SAAS,CACnC,CAAC,GAEU,QACF,CAAC,EAED,CAAC,CAEZ,MAAgB,CACd,MAAO,CAAC,CACV,CACF,CAEA,MAAM,kBAAwF,CAC5F,GAAI,CACF,IAAMtB,EAAS,MAAM,KAAK,oBAAoB,CAC5C,mCACA,WACF,CAAC,EAED,OAAIA,EAAO,QACF,CACL,QAAS,GACT,YAAa,6DACf,EAEO,CACL,QAAS,GACT,MAAOA,EAAO,KAChB,CAEJ,OAASI,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,iCAAiCA,CAAK,EAC/C,CACF,CACF,CAEA,MAAM,uBAAuBmB,EAAmBC,EAA+C,CAC7F,GAAI,CACF,IAAMnB,EAAO,CAAC,mCAAoC,QAAQ,EAa1D,OAXIkB,GACFlB,EAAK,KAAK,aAAckB,CAAQ,EAG9BC,IACFnB,EAAK,KAAK,cAAemB,EAAW,CAAC,EAAE,SAAS,CAAC,EACjDnB,EAAK,KAAK,cAAemB,EAAW,CAAC,EAAE,SAAS,CAAC,IAGpC,MAAM,KAAK,oBAAoBnB,CAAI,GAEvC,QAEF,CAAC,EAED,CAAC,CAEZ,MAAgB,CACd,MAAO,CAAC,CACV,CACF,CAEA,MAAM,qBAAqBoB,EAAsBR,EAAqD,CACpG,GAAI,CACF,IAAMS,EAAe,EAAA5B,QAAK,KAAK,sCAAuC2B,CAAY,EAGlF,GAAI,CAFW,MAAM,KAAK,WAAWC,CAAY,EAG/C,MAAO,CACL,QAAS,GACT,MAAO,aAAaD,CAAY,YAClC,EAIF,IAAM9B,EAAY,KAAK,IAAI,EACrBwB,EAAWM,EAAa,QAAQ,gBAAiB,EAAE,EACnD5B,EAAa,EAAAC,QAAK,KAAK,KAAK,UAAW,GAAGqB,CAAQ,cAAcxB,CAAS,MAAM,EAGrF,MAAM,EAAAD,SAAG,SAASgC,EAAc7B,CAAU,EAG1C,IAAMkB,EAAW,CACf,iBAAkBU,EAClB,aAAc,IAAI,KAAK,EAAE,YAAY,EACrC,eAAgBR,GAAkB,CAAC,EACnC,kBAAmB,iBACrB,EAEMf,EAAeL,EAAW,QAAQ,OAAQ,gBAAgB,EAChE,aAAM,EAAAH,SAAG,UAAUQ,EAAc,KAAK,UAAUa,EAAU,KAAM,CAAC,CAAC,EAE3D,CACL,QAAS,GACT,SAAUlB,EACV,aAAcK,CAChB,CACF,OAASE,EAAO,CACd,MAAO,CACL,QAAS,GACT,MAAO,gCAAgCA,CAAK,EAC9C,CACF,CACF,CACF,EClZA,IAAAuB,GAAyB,eAWZC,EAAN,cAAuB,KAAM,CAClB,OACA,cAEhB,YAAYC,EAAiBC,EAAiB,IAAKC,EAAyB,GAAM,CAChF,MAAMF,CAAO,EACb,KAAK,OAASC,EACd,KAAK,cAAgBC,EAErB,MAAM,kBAAkB,KAAM,KAAK,WAAW,CAChD,CACF,EAEaC,GAAe,CAC1BC,EACAC,EACAC,EACAC,IACS,CACT,IAAMC,EAAYH,EAAI,QAAQ,cAAc,GAAeI,GAAkB,EAY7E,GAVA,QAAQ,MAAM,IAAI,IAAI,KAAK,EAAE,YAAY,CAAC,WAAWD,CAAS,IAAK,CACjE,QAASJ,EAAM,QACf,MAAOA,EAAM,MACb,IAAKC,EAAI,IACT,OAAQA,EAAI,OACZ,QAASA,EAAI,QACb,KAAMA,EAAI,IACZ,CAAC,EAGGD,aAAiB,YAAU,CAC7B,IAAMM,EAA+B,CACnC,MAAO,mBACP,QAASN,EAAM,OAAO,IAAIO,GAAK,GAAGA,EAAE,KAAK,KAAK,GAAG,CAAC,KAAKA,EAAE,OAAO,EAAE,EAAE,KAAK,IAAI,EAC7E,OAAQ,IACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAH,CACF,EACAF,EAAI,OAAO,GAAG,EAAE,KAAKI,CAAa,EAClC,MACF,CAGA,GAAIN,aAAiBL,EAAU,CAC7B,IAAMW,EAA+B,CACnC,MAAO,oBACP,QAASN,EAAM,QACf,OAAQA,EAAM,OACd,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAI,EACA,GAAI,QAAQ,IAAI,WAAa,eAAiB,CAAE,MAAOJ,EAAM,KAAM,CACrE,EACAE,EAAI,OAAOF,EAAM,MAAM,EAAE,KAAKM,CAAa,EAC3C,MACF,CAGA,GAAIN,EAAM,QAAQ,SAAS,cAAc,GAAKA,EAAM,QAAQ,SAAS,UAAU,EAAG,CAChF,IAAMM,EAA+B,CACnC,MAAO,4BACP,QAAS,yDACT,OAAQ,IACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAF,CACF,EACAF,EAAI,OAAO,GAAG,EAAE,KAAKI,CAAa,EAClC,MACF,CAGA,GAAIN,EAAM,QAAQ,SAAS,QAAQ,GAAKA,EAAM,QAAQ,SAAS,QAAQ,EAAG,CACxE,IAAMM,EAA+B,CACnC,MAAO,oBACP,QAAS,mDACT,OAAQ,IACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAF,CACF,EACAF,EAAI,OAAO,GAAG,EAAE,KAAKI,CAAa,EAClC,MACF,CAGA,GAAIN,EAAM,QAAQ,SAAS,SAAS,GAAKA,EAAM,QAAQ,SAAS,WAAW,EAAG,CAC5E,IAAMM,EAA+B,CACnC,MAAO,kBACP,QAAS,sDACT,OAAQ,IACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAF,CACF,EACAF,EAAI,OAAO,GAAG,EAAE,KAAKI,CAAa,EAClC,MACF,CAGA,IAAMA,EAA+B,CACnC,MAAO,wBACP,QAAS,QAAQ,IAAI,WAAa,aAC9B,gDACAN,EAAM,QACV,OAAQ,IACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,UAAAI,EACA,GAAI,QAAQ,IAAI,WAAa,eAAiB,CAAE,MAAOJ,EAAM,KAAM,CACrE,EAEAE,EAAI,OAAO,GAAG,EAAE,KAAKI,CAAa,CACpC,EAQA,SAASE,IAA4B,CACnC,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,EAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,CACjG,CCpHO,IAAMC,GAAgB,CAACC,EAAcC,EAAeC,IAA6B,CACtF,IAAMC,EAAYC,GAAkB,EAC9BC,EAAY,KAAK,IAAI,EAG3BL,EAAI,QAAQ,cAAc,EAAIG,EAC9BF,EAAI,UAAU,eAAgBE,CAAS,EAEvC,IAAMG,EAAyB,CAC7B,UAAAH,EACA,OAAQH,EAAI,OACZ,IAAKA,EAAI,IACT,UAAWA,EAAI,IAAI,YAAY,EAC/B,GAAIA,EAAI,IAAMA,EAAI,WAAW,eAAiB,UAC9C,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,EAGA,QAAQ,IAAI,IAAIM,EAAW,SAAS,KAAKA,EAAW,MAAM,IAAIA,EAAW,GAAG,MAAMA,EAAW,EAAE,KAAKH,CAAS,GAAG,EAGhH,IAAMI,EAAeN,EAAI,KACzBA,EAAI,KAAO,SAASO,EAAM,CACxB,IAAMC,EAAe,KAAK,IAAI,EAAIJ,EAElCC,EAAW,aAAeG,EAC1BH,EAAW,WAAaL,EAAI,WAC5BK,EAAW,cAAgB,OAAO,WAAWE,GAAQ,EAAE,EAGvD,IAAME,EAAWT,EAAI,YAAc,IAAM,QAAU,OACnD,eAAQ,IAAI,IAAI,IAAI,KAAK,EAAE,YAAY,CAAC,KAAKS,CAAQ,IAAIJ,EAAW,MAAM,IAAIA,EAAW,GAAG,MAAML,EAAI,UAAU,IAAIQ,CAAY,MAAMH,EAAW,aAAa,UAAUH,CAAS,GAAG,EAGhLM,EAAe,KACjB,QAAQ,KAAK,kBAAkBH,EAAW,MAAM,IAAIA,EAAW,GAAG,SAASG,CAAY,OAAON,CAAS,GAAG,EAGrGI,EAAa,KAAK,KAAMC,CAAI,CACrC,EAEAN,EAAK,CACP,EAEaS,GAAoB,CAACX,EAAcC,EAAeC,IAEzDF,EAAI,MAAQ,eAAiBA,EAAI,MAAQ,UACpCE,EAAK,EAEPH,GAAcC,EAAKC,EAAKC,CAAI,EAGrC,SAASE,IAA4B,CACnC,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,CACnD,CCpEA,IAAAQ,EAAe,0BACfC,GAAiB,mBAyCJC,EAAN,MAAMC,CAAc,CACzB,OAAe,SACP,gBAAuC,KACvC,oBAA6C,KAE7C,aAAc,CAAC,CAEvB,OAAO,aAA6B,CAClC,OAAKA,EAAc,WACjBA,EAAc,SAAW,IAAIA,GAExBA,EAAc,QACvB,CAEA,MAAM,aAAqC,CACzC,IAAMC,EAAY,KAAK,IAAI,EAE3B,GAAI,CACF,GAAM,CAACC,EAAUC,EAAYC,EAAQC,EAAQC,CAAO,EAAI,MAAM,QAAQ,WAAW,CAC/E,KAAK,cAAc,EACnB,KAAK,gBAAgB,EACrB,KAAK,YAAY,EACjB,KAAK,YAAY,EACjB,KAAK,aAAa,CACpB,CAAC,EAEKC,EAAW,CACf,SAAU,KAAK,qBAAqBL,CAAQ,EAC5C,WAAY,KAAK,qBAAqBC,CAAU,EAChD,OAAQ,KAAK,qBAAqBC,CAAM,EACxC,OAAQ,KAAK,qBAAqBC,CAAM,EACxC,QAAS,KAAK,qBAAqBC,CAAO,CAC5C,EAEME,EAAgB,KAAK,uBAAuBD,CAAQ,EAEpDE,EAA6B,CACjC,OAAQD,EACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,OAAQ,QAAQ,OAAO,EACvB,QAAS,QAAQ,IAAI,qBAAuB,QAC5C,SAAAD,EACA,QAAS,CACP,OAAQ,KAAK,iBAAiB,EAC9B,QAAS,KAAK,kBAAkB,CAClC,CACF,EAEA,KAAK,gBAAkBE,EAEvB,IAAMC,EAAe,KAAK,IAAI,EAAIT,EAClC,eAAQ,IAAI,sCAAsCS,CAAY,gBAAgBF,CAAa,EAAE,EAEtFC,CACT,OAASE,EAAO,CACd,QAAQ,MAAM,gCAAiCA,CAAK,EAEpD,IAAMC,EAA4B,CAChC,OAAQ,YACR,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,OAAQ,QAAQ,OAAO,EACvB,QAAS,QAAQ,IAAI,qBAAuB,QAC5C,SAAU,CACR,SAAU,CAAE,OAAQ,OAAQ,MAAO,sBAAuB,YAAa,IAAI,KAAK,EAAE,YAAY,CAAE,EAChG,WAAY,CAAE,OAAQ,OAAQ,MAAO,sBAAuB,YAAa,IAAI,KAAK,EAAE,YAAY,CAAE,EAClG,OAAQ,CAAE,OAAQ,OAAQ,MAAO,sBAAuB,YAAa,IAAI,KAAK,EAAE,YAAY,CAAE,EAC9F,OAAQ,CAAE,OAAQ,OAAQ,MAAO,sBAAuB,YAAa,IAAI,KAAK,EAAE,YAAY,CAAE,EAC9F,QAAS,CAAE,OAAQ,OAAQ,MAAO,sBAAuB,YAAa,IAAI,KAAK,EAAE,YAAY,CAAE,CACjG,EACA,QAAS,CACP,OAAQ,KAAK,iBAAiB,EAC9B,QAAS,KAAK,kBAAkB,CAClC,CACF,EAEA,YAAK,gBAAkBA,EAChBA,CACT,CACF,CAEA,MAAc,eAAwC,CACpD,IAAMC,EAAQ,KAAK,IAAI,EACvB,GAAI,CAEF,aAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,EAAE,CAAC,EAE7C,CACL,OAAQ,KACR,aAAc,KAAK,IAAI,EAAID,EAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASF,EAAO,CACd,MAAO,CACL,OAAQ,OACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,6BAChD,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CACF,CAEA,MAAc,iBAA0C,CACtD,IAAME,EAAQ,KAAK,IAAI,EACvB,GAAI,CACF,IAAME,EAAU,YAChB,MAAM,EAAAC,QAAG,OAAOD,CAAO,EAGvB,IAAME,EAAW,GAAAC,QAAK,KAAKH,EAAS,uBAAuB,EAC3D,aAAM,EAAAC,QAAG,UAAUC,EAAU,MAAM,EACnC,MAAM,EAAAD,QAAG,OAAOC,CAAQ,EAEjB,CACL,OAAQ,KACR,aAAc,KAAK,IAAI,EAAIJ,EAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASF,EAAO,CACd,MAAO,CACL,OAAQ,OACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,0BAChD,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CACF,CAEA,MAAc,aAAsC,CAClD,IAAME,EAAQ,KAAK,IAAI,EACvB,GAAI,CACF,IAAMM,EAAQ,QAAQ,YAAY,EAKlC,MAAO,CACL,OALmBA,EAAM,SAAWA,EAAM,UAEd,GAAM,WAAa,KAI/C,aAAc,KAAK,IAAI,EAAIN,EAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASF,EAAO,CACd,MAAO,CACL,OAAQ,OACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,sBAChD,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CACF,CAEA,MAAc,aAAsC,CAClD,IAAME,EAAQ,KAAK,IAAI,EACvB,GAAI,CAGF,MAAO,CACL,OAHmB,CAAC,CAAC,QAAQ,IAAI,kBAGV,KAAO,WAC9B,aAAc,KAAK,IAAI,EAAIA,EAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASF,EAAO,CACd,MAAO,CACL,OAAQ,OACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,sBAChD,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CACF,CAEA,MAAc,cAAuC,CACnD,IAAME,EAAQ,KAAK,IAAI,EACvB,GAAI,CACF,IAAMO,EAAc,CAAC,iBAAkB,mBAAoB,iBAAiB,EAE5E,QAAWC,KAAOD,EAChB,MAAM,EAAAJ,QAAG,OAAOK,CAAG,EAGrB,MAAO,CACL,OAAQ,KACR,aAAc,KAAK,IAAI,EAAIR,EAC3B,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,OAASF,EAAO,CACd,MAAO,CACL,OAAQ,OACR,MAAOA,aAAiB,MAAQA,EAAM,QAAU,uBAChD,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CACF,CAEQ,qBAAqBW,EAA4D,CACvF,OAAIA,EAAO,SAAW,YACbA,EAAO,MAGT,CACL,OAAQ,OACR,MAAOA,EAAO,QAAQ,SAAW,uBACjC,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,CACF,CAEQ,uBAAuBf,EAA0E,CACvG,IAAMgB,EAAW,OAAO,OAAOhB,CAAQ,EAAE,IAAIiB,GAAKA,EAAE,MAAM,EAE1D,OAAID,EAAS,SAAS,MAAM,EACnB,YAGLA,EAAS,SAAS,UAAU,EACvB,WAGF,SACT,CAEQ,kBAAkC,CACxC,IAAMJ,EAAQ,QAAQ,YAAY,EAElC,MAAO,CACL,SAAU,KAAK,MAAMA,EAAM,SAAW,KAAO,IAAI,EACjD,UAAW,KAAK,MAAMA,EAAM,UAAY,KAAO,IAAI,EACnD,SAAU,KAAK,MAAMA,EAAM,SAAW,KAAO,IAAI,EACjD,IAAK,KAAK,MAAMA,EAAM,IAAM,KAAO,IAAI,EACvC,MAAO,KAAK,MAAOA,EAAM,SAAWA,EAAM,UAAa,GAAG,CAC5D,CACF,CAEQ,mBAAoC,CAC1C,MAAO,CACL,OAAQ,KAAK,MAAM,QAAQ,OAAO,CAAC,EACnC,IAAK,QAAQ,IACb,SAAU,QAAQ,SAAS,CAC7B,CACF,CAEA,2BAAkC,CAC5B,KAAK,qBACP,cAAc,KAAK,mBAAmB,EAGxC,KAAK,oBAAsB,YAAY,SAAY,CACjD,MAAM,KAAK,YAAY,CACzB,EAAG,GAAK,EAER,QAAQ,IAAI,yCAAyC,CACvD,CAEA,0BAAiC,CAC3B,KAAK,sBACP,cAAc,KAAK,mBAAmB,EACtC,KAAK,oBAAsB,KAE/B,CAEA,oBAA0C,CACxC,OAAO,KAAK,eACd,CACF,EAEaM,GAAqB,MAAOC,EAAcC,IAAiC,CACtF,IAAMC,EAAgB7B,EAAc,YAAY,EAEhD,GAAI,CACF,IAAM8B,EAAS,MAAMD,EAAc,YAAY,EACzCE,EAAaD,EAAO,SAAW,WAAkBA,EAAO,SAAW,WAAxB,IAA2C,IAE5FF,EAAI,OAAOG,CAAU,EAAE,KAAKD,CAAM,CACpC,OAASlB,EAAO,CACd,QAAQ,MAAM,yCAA0CA,CAAK,EAC7DgB,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,OAAQ,YACR,MAAO,sBACP,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,CAAC,CACH,CACF,EAEOI,GAAQhC,EChUR,IAAMiC,EAAe,CAC1B,KAAM,QAAQ,IAAI,MAAQ,IAC1B,KAAM,UACN,KAAM,CACJ,OAAQ,QAAQ,IAAI,WAAa,aAC/B,CAAC,gCAAiC,gCAAgC,EAClE,CAAC,wBAAyB,wBAAyB,sBAAuB,qBAAqB,EACjG,YAAa,EACf,EACA,OAAQ,CACN,KAAM,OACN,WAAY,MACd,EACA,OAAQ,CACN,OAAQ,QAAQ,IAAI,WAAa,aAAe,KAAO,GACzD,EACA,SAAU,CACR,UAAW,CACT,SAAU,IACV,IAAK,GACP,CACF,CACF,ECpBO,IAAMC,EAAmB,CAC9B,GAAGC,EAGH,SAAU,CACR,GAAGA,EAAa,SAChB,OAAQ,CACN,sBAAuB,CACrB,WAAY,CACV,WAAY,CAAC,QAAQ,EACrB,SAAU,CAAC,SAAU,kBAAmB,8BAA8B,EACtE,QAAS,CAAC,SAAU,2BAA2B,EAC/C,UAAW,CAAC,SAAU,iBAAiB,EACvC,OAAQ,CAAC,SAAU,QAAS,QAAQ,EACpC,WAAY,CAAC,SAAU,wBAAwB,EAC/C,SAAU,CAAC,SAAU,OAAO,EAC5B,UAAW,CAAC,QAAQ,EACpB,SAAU,CAAC,SAAU,uBAAuB,CAC9C,CACF,EACA,0BAA2B,GAC3B,0BAA2B,CAAE,OAAQ,cAAe,CACtD,EACA,aAAc,CACZ,SAAU,GAAK,GAAK,IACpB,IAAK,IACL,gBAAiB,GACjB,cAAe,GACf,QAAS,CACP,MAAO,oBACP,QAAS,+CACT,WAAY,GACd,CACF,CACF,EAGA,OAAQ,CACN,QAAS,IACT,iBAAkB,KAClB,eAAgB,KAChB,cAAe,MACf,eAAgB,GAClB,EAGA,SAAU,CACR,eAAgB,GAChB,kBAAmB,IACnB,wBAAyB,IACzB,qBAAsB,GACxB,EAGA,OAAQ,CACN,YAAa,GAAK,KAAO,KACzB,SAAU,GACV,iBAAkB,CAChB,aACA,YACA,cACA,aACA,YACA,YACA,YACA,YACF,CACF,EAGA,MAAO,CACL,YAAa,CACX,OAAQ,QAAQ,IAAI,WAAa,aAAe,MAAW,EAC3D,KAAM,GACN,aAAc,GACd,UAAW,EACb,EACA,IAAK,CACH,OAAQ,IACR,qBAAsB,GACxB,CACF,EAGA,OAAQ,CACN,qBAAsB,GACtB,gBAAiB,IACjB,gBAAiB,GACnB,EAGA,WAAY,CACV,oBAAqB,IACrB,kBAAmB,GACnB,oBAAqB,EACvB,CACF,EAGaC,EAAkB,CAC7B,iBAAkB,IAAM,CACtB,IAAMC,EAAQ,QAAQ,YAAY,EAC5BC,EAAYJ,EAAiB,OAAO,qBAE1C,OAAIG,EAAM,SAAWA,EAAM,UAAYC,IACrC,QAAQ,KAAK,gCAAgC,KAAK,MAAOD,EAAM,SAAWA,EAAM,UAAa,GAAG,CAAC,GAAG,EAEhG,OAAO,KACT,OAAO,GAAG,EACV,QAAQ,IAAI,8CAA8C,IAIvD,CACL,SAAU,KAAK,MAAMA,EAAM,SAAW,KAAO,IAAI,EACjD,UAAW,KAAK,MAAMA,EAAM,UAAY,KAAO,IAAI,EACnD,SAAU,KAAK,MAAMA,EAAM,SAAW,KAAO,IAAI,EACjD,IAAK,KAAK,MAAMA,EAAM,IAAM,KAAO,IAAI,CACzC,CACF,EAEA,gBAAiB,IAAM,CACrB,YAAY,IAAM,CAChB,IAAME,EAASH,EAAgB,iBAAiB,EAChD,QAAQ,IAAI,kBAAkBG,EAAO,QAAQ,MAAMA,EAAO,SAAS,YAAYA,EAAO,GAAG,IAAI,CAC/F,EAAGL,EAAiB,WAAW,mBAAmB,CACpD,CACF,EAEOM,EAAQN,EChIR,IAAMO,EAAN,KAAuB,CACpB,OAAwB,KACxB,cAAsC,KACtC,gBAAyC,KACzC,eAAiB,GAEzB,YAAYC,EAAgB,CAC1B,KAAK,OAASA,EACd,KAAK,cAAgBC,GAAc,YAAY,EAC/C,KAAK,oBAAoB,CAC3B,CAEQ,qBAA4B,CAElC,QAAQ,GAAG,UAAW,IAAM,CAC1B,QAAQ,IAAI,oCAAoC,EAChD,KAAK,SAAS,SAAS,CACzB,CAAC,EAED,QAAQ,GAAG,SAAU,IAAM,CACzB,QAAQ,IAAI,mCAAmC,EAC/C,KAAK,SAAS,QAAQ,CACxB,CAAC,EAED,QAAQ,GAAG,UAAW,IAAM,CAC1B,QAAQ,IAAI,sDAAsD,EAClE,KAAK,SAAS,SAAS,CACzB,CAAC,EAGD,QAAQ,GAAG,oBAAsBC,GAAU,CACzC,QAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,cAAcA,CAAK,CAC1B,CAAC,EAGD,QAAQ,GAAG,qBAAsB,CAACC,EAAQC,IAAY,CACpD,QAAQ,MAAM,qCAAsCA,EAAS,UAAWD,CAAM,EAC9E,KAAK,cAAc,IAAI,MAAM,wBAAwBA,CAAM,EAAE,CAAC,CAChE,CAAC,EAGD,QAAQ,GAAG,UAAYE,GAAY,CACjC,QAAQ,KAAK,YAAaA,EAAQ,KAAMA,EAAQ,OAAO,EACnDA,EAAQ,OACV,QAAQ,KAAK,mBAAoBA,EAAQ,KAAK,CAElD,CAAC,CACH,CAEA,MAAc,SAASC,EAA+B,CACpD,GAAI,KAAK,eAAgB,CACvB,QAAQ,IAAI,mDAAmD,EAC/D,MACF,CAEA,KAAK,eAAiB,GACtB,QAAQ,IAAI,0CAA0CA,CAAM,GAAG,EAG/D,KAAK,gBAAkB,WAAW,IAAM,CACtC,QAAQ,MAAM,oDAAoD,EAClE,QAAQ,KAAK,CAAC,CAChB,EAAG,GAAK,EAER,GAAI,CAEE,KAAK,SACP,QAAQ,IAAI,gCAAgC,EAC5C,KAAK,OAAO,MAAM,IAAM,CACtB,QAAQ,IAAI,+BAA+B,CAC7C,CAAC,GAIC,KAAK,gBACP,QAAQ,IAAI,mCAAmC,EAC/C,KAAK,cAAc,yBAAyB,GAI9C,MAAM,KAAK,yBAAyB,EAGpC,MAAM,KAAK,QAAQ,EAEnB,QAAQ,IAAI,wCAAwC,EAEhD,KAAK,iBACP,aAAa,KAAK,eAAe,EAGnC,QAAQ,KAAK,CAAC,CAChB,OAASJ,EAAO,CACd,QAAQ,MAAM,6CAA8CA,CAAK,EACjE,KAAK,cAAcA,CAAK,CAC1B,CACF,CAEA,MAAc,0BAA0C,CACtD,OAAO,IAAI,QAASK,GAAY,CAC9B,GAAI,CAAC,KAAK,OAAQ,CAChBA,EAAQ,EACR,MACF,CAEA,IAAMC,EAAmB,IAAM,CAE7B,IAAMC,EAAc,KAAK,OAAO,cAAgB,EAE5CA,IAAgB,GAClB,QAAQ,IAAI,mCAAmC,EAC/CF,EAAQ,IAER,QAAQ,IAAI,0BAA0BE,CAAW,qBAAqB,EACtE,WAAWD,EAAkB,GAAI,EAErC,EAEAA,EAAiB,CACnB,CAAC,CACH,CAEA,MAAc,SAAyB,CACrC,QAAQ,IAAI,qCAAqC,EAEjD,GAAI,CAEF,IAAME,EAAK,KAAM,QAAO,aAAa,EAC/BC,EAAU,iBAEhB,GAAI,CACF,IAAMC,EAAQ,MAAMF,EAAG,QAAQC,CAAO,EACtC,QAAWE,KAAQD,GACbC,EAAK,WAAW,OAAO,GAAKA,EAAK,SAAS,MAAM,KAClD,MAAMH,EAAG,OAAO,GAAGC,CAAO,IAAIE,CAAI,EAAE,EACpC,QAAQ,IAAI,gCAAgCA,CAAI,EAAE,EAGxD,OAASX,EAAO,CACd,QAAQ,KAAK,wCAAyCA,CAAK,CAC7D,CAGI,OAAO,KACT,OAAO,GAAG,EACV,QAAQ,IAAI,+CAA+C,GAG7D,QAAQ,IAAI,8BAA8B,CAC5C,OAASA,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,CACzD,CACF,CAEQ,cAAcA,EAAoB,CACxC,QAAQ,MAAM,0CAA2CA,CAAK,EAE1D,KAAK,iBACP,aAAa,KAAK,eAAe,EAInC,QAAQ,MAAM,0BAA2BA,EAAM,KAAK,EAGpD,QAAQ,KAAK,CAAC,CAChB,CACF,EAEOY,GAAQf,EC7Kf,IAAAgB,GAAuB,mBACvBC,EAAiB,mBACjBC,EAAe,0BACfC,GAAmB,qBACnBC,GAAsB,yBAEhBC,KAAS,WAAO,EAGhBC,MAAS,GAAAC,SAAO,CACpB,KAAM,EAAAC,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,MAAM,EAChD,OAAQ,CACN,SAAU,GAAK,KAAO,IACxB,EACA,WAAY,CAACC,EAAKC,EAAMC,IAAO,CAER,CAAC,aAAc,YAAa,aAAc,YAAa,WAAW,EACtE,SAASD,EAAK,QAAQ,EACrCC,EAAG,KAAM,EAAI,EAEbA,EAAG,IAAI,MAAM,kDAAkD,CAAC,CAEpE,CACF,CAAC,EAGDN,EAAO,KAAK,oBAAqBC,GAAO,OAAO,OAAO,EAAG,MAAOG,EAAKG,IAAQ,CAC3E,GAAI,CACF,GAAM,CAAE,QAAAC,CAAQ,EAAIJ,EAAI,KAClBK,EAAYL,EAAI,KAEtB,GAAI,CAACK,GAAa,CAACD,EACjB,OAAOD,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,sCACT,CAAC,EAIH,GAAI,CAAC,mBAAmB,KAAKC,CAAO,EAClC,OAAOD,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,yBACT,CAAC,EAIH,IAAMG,EAAS,MAAMC,EAAiB,CACpC,WAAY,UACZ,UAAWF,EAAU,KACrB,aAAcD,CAChB,CAAC,EAGD,MAAM,EAAAI,QAAG,OAAOH,EAAU,IAAI,EAE1BC,EAAO,QACTH,EAAI,KAAK,CACP,QAAS,GACT,QAASG,EAAO,SAChB,SAAU,CACR,OAAQA,EAAO,QACf,YAAaA,EAAO,aACpB,cAAeA,EAAO,cACxB,EACA,QAAS,uCACX,CAAC,EAEDH,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,4BACP,QAASG,EAAO,KAClB,CAAC,CAEL,OAASG,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDN,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,kCACP,QAASM,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDb,EAAO,KAAK,cAAe,MAAOI,EAAKG,IAAQ,CAC7C,GAAI,CACF,GAAM,CAAE,KAAAO,EAAM,QAAAN,EAAS,MAAAO,EAAQ,SAAU,EAAIX,EAAI,KAGjD,GAAI,CAACU,GAAQ,CAACN,EACZ,OAAOD,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,8CACT,CAAC,EAIH,IAAMS,EAAgBF,EAAK,QAAQ,QAAS,EAAE,EAAE,KAAK,EACrD,GAAIE,EAAc,SAAW,GAAKA,EAAc,OAAS,IACvD,OAAOT,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,4CACT,CAAC,EAIH,IAAMG,EAAS,MAAMC,EAAiB,CACpC,WAAY,QACZ,aAAcH,EACd,SAAUQ,CACZ,CAAC,EAEGN,EAAO,QACTH,EAAI,KAAK,CACP,QAAS,GACT,SAAU,mBAAmB,EAAAJ,QAAK,SAASO,EAAO,UAAU,CAAC,GAC7D,QAASA,EAAO,SAChB,QAAS,gCACX,CAAC,EAEDH,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,yBACP,QAASG,EAAO,KAClB,CAAC,CAEL,OAASG,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CN,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,yBACP,QAASM,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDb,EAAO,IAAI,aAAc,MAAOI,EAAKG,IAAQ,CAC3C,GAAI,CACF,IAAMG,EAAS,MAAMC,EAAiB,CAAC,WAAY,MAAM,CAAC,EAEtD,MAAM,QAAQD,CAAM,EACtBH,EAAI,KAAK,CAAE,OAAQG,CAAO,CAAC,EAE3BH,EAAI,KAAK,CAAE,OAAQ,CAAC,CAAE,CAAC,CAE3B,OAASM,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CN,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,mCACP,QAASM,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDb,EAAO,KAAK,SAAUC,GAAO,MAAM,cAAe,EAAE,EAAG,MAAOG,EAAKG,IAAQ,CACzE,GAAI,CACF,GAAM,CAAE,QAAAC,EAAS,OAAAS,EAAS,GAAI,EAAIb,EAAI,KAChCc,EAAad,EAAI,MAEvB,GAAI,CAACI,GAAW,CAACU,GAAcA,EAAW,SAAW,EACnD,OAAOX,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,oDACT,CAAC,EAIH,GAAIW,EAAW,OAAS,GACtB,OAAOX,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,6CACT,CAAC,EAIH,IAAMY,EAAc,EAAAhB,QAAK,KACvB,QAAQ,IAAI,EACZ,UACA,SACA,WACA,GAAGK,CAAO,IAAI,KAAK,IAAI,CAAC,EAC1B,EACA,MAAM,EAAAI,QAAG,MAAMO,EAAa,CAAE,UAAW,EAAK,CAAC,EAG/C,IAAMC,EAAgB,CAAC,EACvB,QAAWf,KAAQa,EAAY,CAC7B,IAAMG,EAAW,EAAAlB,QAAK,KAAKgB,EAAad,EAAK,YAAY,EACzD,MAAM,EAAAO,QAAG,OAAOP,EAAK,KAAMgB,CAAQ,EACnCD,EAAc,KAAKC,CAAQ,CAC7B,CAGA,IAAMC,EAAa,EAAAnB,QAAK,SAASgB,CAAW,EAC5CI,GAAqBf,EAASW,EAAa,SAASF,CAAM,CAAC,EAE3DV,EAAI,KAAK,CACP,QAAS,GACT,QAAS,yBACT,WAAAe,EACA,eAAgBF,EAAc,MAChC,CAAC,CACH,OAASP,EAAO,CACd,QAAQ,MAAM,wBAAyBA,CAAK,EAC5CN,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,wBACP,QAASM,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDb,EAAO,IAAI,+BAAgC,MAAOI,EAAKG,IAAQ,CAC7D,GAAI,CACF,GAAM,CAAE,WAAAe,CAAW,EAAIlB,EAAI,OAGrBe,EAAc,EAAAhB,QAAK,KACvB,QAAQ,IAAI,EACZ,UACA,SACA,WACAmB,CACF,EAEME,EAAa,EAAArB,QAAK,KAAKgB,EAAa,aAAa,EAEvD,GAAI,CACF,IAAMM,EAAa,MAAM,EAAAb,QAAG,SAASY,EAAY,OAAO,EAClDE,EAAS,KAAK,MAAMD,CAAU,EACpClB,EAAI,KAAKmB,CAAM,CACjB,MAAQ,CACNnB,EAAI,KAAK,CACP,OAAQ,YACR,QAAS,4BACX,CAAC,CACH,CACF,OAASM,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDN,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,kCACP,QAASM,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGD,eAAeF,EAAiBgB,EAA8B,CAC5D,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAa,EAAA3B,QAAK,KAAK,QAAQ,IAAI,EAAG,SAAU,oBAAoB,EACpE4B,KAAgB,UAAM,UAAW,CAACD,EAAY,GAAGH,CAAI,CAAC,EAExDK,EAAS,GACTC,EAAS,GAEbF,EAAc,OAAO,GAAG,OAASG,GAAS,CACxCF,GAAUE,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAc,OAAO,GAAG,OAASG,GAAS,CACxCD,GAAUC,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAc,GAAG,QAAUI,GAAS,CAClC,GAAIA,IAAS,EACX,GAAI,CACF,IAAMzB,EAAS,KAAK,MAAMsB,EAAO,KAAK,CAAC,EACvCJ,EAAQlB,CAAM,CAChB,MAAgB,CACdmB,EAAO,IAAI,MAAM,4BAA4B,CAAC,CAChD,MAEAA,EAAO,IAAI,MAAMI,GAAU,6BAA6B,CAAC,CAE7D,CAAC,EAEDF,EAAc,GAAG,QAAUlB,GAAU,CACnCgB,EAAOhB,CAAK,CACd,CAAC,CACH,CAAC,CACH,CAGA,eAAeU,GAAqBf,EAAiBW,EAAqBF,EAAgB,CACxF,GAAI,CACF,IAAMO,EAAa,EAAArB,QAAK,KAAKgB,EAAa,aAAa,EAGvD,MAAM,EAAAP,QAAG,UAAUY,EAAY,KAAK,UAAU,CAC5C,OAAQ,WACR,QAAAhB,EACA,SAAU,EACV,OAAAS,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,CAAC,CAAC,EAGF,WAAW,SAAY,CACrB,GAAI,CAEF,MAAM,EAAAL,QAAG,UAAUY,EAAY,KAAK,UAAU,CAC5C,OAAQ,YACR,QAAAhB,EACA,SAAU,IACV,OAAAS,EACA,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,cAAe,IAAI,KAAK,EAAE,YAAY,CACxC,CAAC,CAAC,EAEF,QAAQ,IAAI,iCAAiCT,CAAO,EAAE,CACxD,OAASK,EAAO,CACd,QAAQ,MAAM,6BAA8BA,CAAK,CACnD,CACF,EAAG,GAAK,CACV,OAASA,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,CAChD,CACF,CAEA,IAAOuB,GAAQpC,ECxTf,IAAAqC,GAAuB,mBAEvB,IAAAC,GAAiB,mBAGXC,KAAS,WAAO,EAChBC,EAAc,IAAIC,EAGxBF,EAAO,KAAK,YAAa,MAAOG,EAAKC,IAAQ,CAC3C,GAAI,CACF,GAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,YAAAC,CAAY,EAAIP,EAAI,KAElE,GAAI,CAACE,GAAS,CAACC,GAAS,CAACC,GAAS,CAACC,EACjC,OAAOJ,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,qDACT,CAAC,EAGH,IAAMO,EAAS,MAAMV,EAAY,aAAa,CAC5C,MAAAI,EACA,MAAAC,EACA,MAAAC,EACA,MAAO,SAASC,CAAK,EACrB,SAAUC,EAAW,SAASA,CAAQ,EAAI,OAC1C,YAAa,EAAQC,CACvB,CAAC,EAEGC,EAAO,QACTP,EAAI,KAAK,CACP,QAAS,GACT,SAAUO,EAAO,SACjB,aAAcA,EAAO,aACrB,QAAS,6BACX,CAAC,EAEDP,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,QAAS,GACT,MAAOO,EAAO,KAChB,CAAC,CAEL,OAASC,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CR,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,2BAA2BQ,CAAK,EACzC,CAAC,CACH,CACF,CAAC,EAGDZ,EAAO,IAAI,QAAS,MAAOG,EAAKC,IAAQ,CACtC,GAAI,CACF,IAAMS,EAAY,MAAMZ,EAAY,kBAAkB,EACtDG,EAAI,KAAK,CAAE,MAAOS,CAAU,CAAC,CAC/B,OAASD,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChDR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,8BAA8BQ,CAAK,EAAG,CAAC,CACvE,CACF,CAAC,EAGDZ,EAAO,IAAI,sBAAuB,MAAOG,EAAKC,IAAQ,CACpD,GAAI,CACF,IAAMU,EAAWX,EAAI,OAAO,SACtBY,EAAW,GAAAC,QAAK,KAAK,2BAA4BF,CAAQ,EACzDG,EAAW,MAAMhB,EAAY,gBAAgBc,CAAQ,EAEvDE,EACFb,EAAI,KAAKa,CAAQ,EAEjBb,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,oBAAqB,CAAC,CAExD,OAASQ,EAAO,CACd,QAAQ,MAAM,0BAA2BA,CAAK,EAC9CR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,2BAA2BQ,CAAK,EAAG,CAAC,CACpE,CACF,CAAC,EAGDZ,EAAO,KAAK,kBAAmB,MAAOG,EAAKC,IAAQ,CACjD,GAAI,CACF,IAAMO,EAAS,MAAMV,EAAY,qBAAqB,EAElDU,EAAO,QACTP,EAAI,KAAK,CACP,QAAS,GACT,QAAS,wCACT,YAAaO,EAAO,WACtB,CAAC,EAEDP,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,QAAS,GACT,MAAOO,EAAO,KAChB,CAAC,CAEL,OAASC,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,EAC/CR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,6BAA6BQ,CAAK,EAAG,CAAC,CACtE,CACF,CAAC,EAGDZ,EAAO,IAAI,uBAAwB,MAAOG,EAAKC,IAAQ,CACrD,GAAI,CACF,IAAMc,EAAQf,EAAI,OAAO,MACnBgB,EAAU,MAAMlB,EAAY,kBAAkBiB,CAAK,EACzDd,EAAI,KAAK,CAAE,MAAAc,EAAO,QAAAC,CAAQ,CAAC,CAC7B,OAASP,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,0BAA0BQ,CAAK,EAAG,CAAC,CACnE,CACF,CAAC,EAGDZ,EAAO,IAAI,oCAAqC,MAAOG,EAAKC,IAAQ,CAClE,GAAI,CACF,IAAMgB,EAAW,SAASjB,EAAI,OAAO,QAAQ,EACvCkB,EAAW,SAASlB,EAAI,OAAO,QAAQ,EAE7C,GAAI,MAAMiB,CAAQ,GAAK,MAAMC,CAAQ,EACnC,OAAOjB,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,sBAAuB,CAAC,EAG/D,IAAMe,EAAU,MAAMlB,EAAY,kBAAkBmB,EAAUC,CAAQ,EACtEjB,EAAI,KAAK,CAAE,WAAY,CAAE,IAAKgB,EAAU,IAAKC,CAAS,EAAG,QAAAF,CAAQ,CAAC,CACpE,OAASP,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,0BAA0BQ,CAAK,EAAG,CAAC,CACnE,CACF,CAAC,EAED,IAAOU,GAAQtB,ECnIf,IAAAuB,GAAuB,mBCAvB,IAAAC,EAAsB,yBACtBC,EAA+B,cAC/BC,EAAiB,mBAoBJC,EAAN,KAAuB,CACpB,WACA,UACA,UAER,aAAc,CACZ,KAAK,WAAa,QAAQ,IAAI,uBAAyB,UACvD,KAAK,UAAY,QAAQ,IAAI,sBAAwB,kBACrD,KAAK,UAAY,EAAAC,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,QAAS,WAAW,EAGzE,KAAK,gBAAgB,CACvB,CAEA,MAAc,iBAAiC,CAC7C,GAAI,CACF,MAAM,EAAAC,SAAG,MAAM,KAAK,UAAW,CAAE,UAAW,EAAK,CAAC,CACpD,OAASC,EAAO,CACd,QAAQ,MAAM,qCAAsCA,CAAK,CAC3D,CACF,CAEA,MAAM,0BAA0BC,EAAgBC,EAA0C,CAExF,IAAMC,EAAiB,aADL,KAAK,IAAI,CACkB,OACvCC,EAAa,EAAAN,QAAK,KAAKI,EAAO,UAAWC,CAAc,EAE7D,GAAI,CAEF,IAAME,EAAa,MAAM,KAAK,uBAAuBJ,EAAQC,EAAQE,CAAU,EAGzEE,EAAS,MAAM,KAAK,uBAAuBD,CAAU,EAE3D,GAAIC,EAAO,QAAS,CAGlB,GADmB,MAAM,KAAK,WAAWF,CAAU,EAEjD,eAAQ,IAAI,oCAAoCA,CAAU,EAAE,EACrDA,EAEP,MAAM,IAAI,MAAM,gCAAgC,CAEpD,KACE,OAAM,IAAI,MAAME,EAAO,OAAS,6BAA6B,CAEjE,OAASN,EAAO,CACd,cAAQ,MAAM,8BAA+BA,CAAK,EAC5CA,CACR,CACF,CAEA,MAAc,uBAAuBC,EAAgBC,EAAyBE,EAAqC,CACjH,IAAMG,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAcWL,EAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,iEAKYA,EAAO,gBAAkB,EAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAkE9ED,CAAM;AAAA,qBACDG,CAAU;AAAA,qBACVF,EAAO,gBAAkB,EAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASxCG,EAAa,EAAAP,QAAK,KAAK,KAAK,UAAW,oBAAoB,KAAK,IAAI,CAAC,KAAK,EAChF,aAAM,EAAAC,SAAG,UAAUM,EAAYE,CAAa,EACrCF,CACT,CAEA,MAAc,uBAAuBA,EAA+C,CAClF,OAAO,IAAI,QAASG,GAAY,CAC9B,IAAMC,KAAU,SAAM,KAAK,WAAY,CAACJ,CAAU,CAAC,EAC/CK,EAAS,GACTC,EAAS,GAEbF,EAAQ,OAAO,GAAG,OAASG,GAAS,CAClCF,GAAUE,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAQ,OAAO,GAAG,OAASG,GAAS,CAClCD,GAAUC,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAQ,GAAG,QAAUI,GAAS,CAC5B,GAAIA,IAAS,EACX,GAAI,CACF,IAAMP,EAAS,KAAK,MAAMI,EAAO,KAAK,CAAC,EACvCF,EAAQF,CAAM,CAChB,MAAgB,CACdE,EAAQ,CAAE,QAAS,GAAO,MAAO,mCAAoC,CAAC,CACxE,MAEAA,EAAQ,CAAE,QAAS,GAAO,MAAOG,GAAU,6BAA8B,CAAC,CAE9E,CAAC,EAEDF,EAAQ,GAAG,QAAUT,GAAU,CAC7BQ,EAAQ,CAAE,QAAS,GAAO,MAAOR,EAAM,OAAQ,CAAC,CAClD,CAAC,CACH,CAAC,CACH,CAEA,MAAM,gBAAgBE,EAA0C,CAC9D,IAAMY,EAAY,KAAK,IAAI,EACrBC,EAAY,EAAAjB,QAAK,KAAKI,EAAO,UAAW,SAASY,CAAS,EAAE,EAElE,GAAI,CACF,MAAM,EAAAf,SAAG,MAAMgB,EAAW,CAAE,UAAW,EAAK,CAAC,EAG7C,IAAMV,EAAa,MAAM,KAAK,qBAAqBH,EAAQa,CAAS,EAG9DT,EAAS,MAAM,KAAK,sBAAsBD,CAAU,EAE1D,GAAIC,EAAO,QACT,eAAQ,IAAI,kCAAkCS,CAAS,EAAE,EAClDA,EAEP,MAAM,IAAI,MAAMT,EAAO,OAAS,4BAA4B,CAEhE,OAASN,EAAO,CACd,cAAQ,MAAM,6BAA8BA,CAAK,EAC3CA,CACR,CACF,CAEA,MAAc,qBAAqBE,EAAyBa,EAAoC,CAC9F,IAAMR,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAYSL,EAAO,OAAO,kBAAkBa,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2CAKjCb,EAAO,YAAY,oBAAoBA,EAAO,WAAW,gBAAgBA,EAAO,eAAiB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCrIG,EAAa,EAAAP,QAAK,KAAKiB,EAAW,qBAAqB,EAC7D,aAAM,EAAAhB,SAAG,UAAUM,EAAYE,CAAa,EACrCF,CACT,CAEA,MAAc,sBAAsBA,EAA+C,CACjF,OAAO,IAAI,QAASG,GAAY,CAC9B,IAAMC,KAAU,SAAM,KAAK,WAAY,CAACJ,CAAU,CAAC,EAC/CK,EAAS,GACTC,EAAS,GAEbF,EAAQ,OAAO,GAAG,OAASG,GAAS,CAClCF,GAAUE,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAQ,OAAO,GAAG,OAASG,GAAS,CAClCD,GAAUC,EAAK,SAAS,CAC1B,CAAC,EAEDH,EAAQ,GAAG,QAAUI,GAAS,CAC5B,GAAIA,IAAS,EACX,GAAI,CACF,IAAMP,EAAS,KAAK,MAAMI,EAAO,KAAK,CAAC,EACvCF,EAAQF,CAAM,CAChB,MAAgB,CACdE,EAAQ,CAAE,QAAS,GAAO,MAAO,iCAAkC,CAAC,CACtE,MAEAA,EAAQ,CAAE,QAAS,GAAO,MAAOG,GAAU,iBAAkB,CAAC,CAElE,CAAC,EAEDF,EAAQ,GAAG,QAAUT,GAAU,CAC7BQ,EAAQ,CAAE,QAAS,GAAO,MAAOR,EAAM,OAAQ,CAAC,CAClD,CAAC,CACH,CAAC,CACH,CAEA,MAAM,oBAAwC,CAC5C,GAAI,CACF,IAAMgB,EAAY,EAAAlB,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,SAAU,WAAW,EAC3E,aAAM,EAAAC,SAAG,MAAMiB,EAAW,CAAE,UAAW,EAAK,CAAC,GAE7B,MAAM,EAAAjB,SAAG,QAAQiB,EAAW,CAAE,cAAe,EAAK,CAAC,GAEhE,OAAOC,GAASA,EAAM,YAAY,CAAC,EACnC,IAAIA,GAASA,EAAM,IAAI,CAG5B,OAASjB,EAAO,CACd,eAAQ,MAAM,kCAAmCA,CAAK,EAC/C,CAAC,CACV,CACF,CAEA,MAAc,WAAWkB,EAAoC,CAC3D,GAAI,CACF,aAAM,EAAAnB,SAAG,OAAOmB,CAAQ,EACjB,EACT,MAAQ,CACN,MAAO,EACT,CACF,CACF,ED/VA,IAAAC,EAAiB,mBACjBC,EAAe,0BACfC,GAAmB,qBAEbC,KAAS,WAAO,EAChBC,EAAmB,IAAIC,EAGvBC,MAAS,GAAAC,SAAO,CACpB,KAAM,EAAAC,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,MAAM,EAChD,OAAQ,CACN,SAAU,IAAM,KAAO,IACzB,CACF,CAAC,EAGDL,EAAO,KAAK,YAAa,MAAOM,EAAKC,IAAQ,CAC3C,GAAI,CACF,GAAM,CAAE,OAAAC,EAAQ,aAAAC,EAAc,YAAAC,EAAa,YAAAC,EAAc,EAAK,EAAIL,EAAI,KAEtE,GAAI,CAACE,EACH,OAAOD,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,oBAAqB,CAAC,EAG7D,IAAMK,EAAY,EAAAP,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,QAAS,WAAW,EAC1E,MAAM,EAAAQ,QAAG,MAAMD,EAAW,CAAE,UAAW,EAAK,CAAC,EAE7C,IAAME,EAAS,CACb,UAAW,kBACX,UAAAF,EACA,aAAAH,EACA,YAAAC,EACA,eAAgBC,CAClB,EAEMI,EAAY,MAAMd,EAAiB,0BAA0BO,EAAQM,CAAM,EAEjFP,EAAI,KAAK,CACP,QAAS,GACT,UAAW,EAAAF,QAAK,SAASU,CAAS,EAClC,QAAS,8BACX,CAAC,CAEH,OAASC,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClDT,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,2BACP,QAASS,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDhB,EAAO,KAAK,SAAUG,GAAO,MAAM,aAAa,EAAG,MAAOG,EAAKC,IAAQ,CACrE,GAAI,CACF,GAAM,CAAE,aAAAE,EAAc,YAAAC,EAAa,cAAAO,EAAgB,GAAI,EAAIX,EAAI,KAE/D,GAAI,CAACG,GAAgB,CAACC,EACpB,OAAOH,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,6CACT,CAAC,EAGH,GAAI,CAACD,EAAI,OAASA,EAAI,MAAM,SAAW,EACrC,OAAOC,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,uCACT,CAAC,EAIH,IAAMW,EAAc,EAAAb,QAAK,KACvB,QAAQ,IAAI,EACZ,UACA,SACA,WACA,GAAGI,CAAY,IAAIC,CAAW,IAAI,KAAK,IAAI,CAAC,EAC9C,EACA,MAAM,EAAAG,QAAG,MAAMK,EAAa,CAAE,UAAW,EAAK,CAAC,EAG/C,IAAMC,EAAQb,EAAI,MAClB,QAAWc,KAAQD,EAAO,CACxB,IAAME,EAAW,EAAAhB,QAAK,KAAKa,EAAaE,EAAK,YAAY,EACzD,MAAM,EAAAP,QAAG,OAAOO,EAAK,KAAMC,CAAQ,CACrC,CAEA,IAAMT,EAAY,EAAAP,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,SAAU,YAAa,GAAGI,CAAY,IAAIC,CAAW,EAAE,EAEvGI,EAAS,CACb,QAASI,EACT,aAAAT,EACA,YAAAC,EACA,UAAAE,EACA,cAAe,SAASK,CAAa,CACvC,EAGAhB,EAAiB,gBAAgBa,CAAM,EACpC,KAAKQ,GAAa,CACjB,QAAQ,IAAI,sBAAuBA,CAAS,CAC9C,CAAC,EACA,MAAMN,GAAS,CACd,QAAQ,MAAM,mBAAoBA,CAAK,CACzC,CAAC,EAEHT,EAAI,KAAK,CACP,QAAS,GACT,QAAS,gCACT,WAAY,EAAAF,QAAK,SAASO,CAAS,CACrC,CAAC,CAEH,OAASI,EAAO,CACd,QAAQ,MAAM,kBAAmBA,CAAK,EACtCT,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,2BACP,QAASS,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDhB,EAAO,IAAI,UAAW,MAAOM,EAAKC,IAAQ,CACxC,GAAI,CACF,IAAMgB,EAAS,MAAMtB,EAAiB,mBAAmB,EACzDM,EAAI,KAAK,CAAE,OAAAgB,CAAO,CAAC,CACrB,OAASP,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CT,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,yBACP,QAASS,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGDhB,EAAO,IAAI,+BAAgC,MAAOM,EAAKC,IAAQ,CAC7D,GAAI,CACF,GAAM,CAAE,WAAAiB,CAAW,EAAIlB,EAAI,OACrBmB,EAAW,EAAApB,QAAK,KAAK,QAAQ,IAAI,EAAG,UAAW,SAAU,YAAamB,CAAU,EAEtF,GAAI,CACF,MAAM,EAAAX,QAAG,OAAO,EAAAR,QAAK,KAAKoB,EAAU,kBAAkB,CAAC,EACvDlB,EAAI,KAAK,CAAE,OAAQ,WAAY,CAAC,CAClC,MAAQ,CAEN,GAAI,CACF,MAAM,EAAAM,QAAG,OAAOY,CAAQ,EACxBlB,EAAI,KAAK,CAAE,OAAQ,UAAW,CAAC,CACjC,MAAQ,CACNA,EAAI,KAAK,CAAE,OAAQ,WAAY,CAAC,CAClC,CACF,CACF,OAASS,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDT,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,kCACP,QAASS,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAED,IAAOU,GAAQ1B,EVpKf,IAAA2B,GAAA,GAqBA,GAAAC,QAAO,OAAO,EAGd,IAAMC,MAAoB,kBAAcF,GAAY,GAAG,EACjDG,EAAmB,EAAAC,QAAK,QAAQF,EAAiB,EAKjDG,GAAS,IAAI,GAAAC,QAAO,QAAQ,IAAI,mBAAqB,GAAI,CAC7D,WAAY,YACd,CAAC,EAGKC,KAAM,EAAAC,SAAQ,EACdC,EAAO,QAAQ,IAAI,MAAQ,IAI3BC,EAAc,IAAIC,EAClBC,GAAgBC,EAAc,YAAY,EAIhD,GAAI,QAAQ,IAAI,WAAa,aAAc,CACzCN,EAAI,OAAI,GAAAO,SAAOC,EAAiB,SAAS,MAAM,CAAC,EAGhD,IAAMC,KAAU,GAAAC,SAAUF,EAAiB,SAAS,YAAY,EAChER,EAAI,IAAIS,CAAO,EAGfE,EAAgB,gBAAgB,CAClC,CAGAX,EAAI,IAAIY,EAAiB,EAGzBZ,EAAI,OAAI,EAAAa,SAAKL,EAAiB,IAAI,CAAC,EAGnCR,EAAI,IAAI,EAAAC,QAAQ,KAAK,CACnB,MAAOO,EAAiB,OAAO,KAC/B,OAAQ,CAACM,EAAKC,EAAKC,IAAQ,CACzB,GAAIA,EAAI,OAASR,EAAiB,OAAO,YACvC,MAAM,IAAIS,EAAS,4BAA6B,GAAG,CAEvD,CACF,CAAC,CAAC,EAEFjB,EAAI,IAAI,EAAAC,QAAQ,WAAW,CACzB,SAAU,GACV,MAAOO,EAAiB,OAAO,WAC/B,OAAQ,CAACM,EAAKC,EAAKC,IAAQ,CACzB,GAAIA,EAAI,OAASR,EAAiB,OAAO,YACvC,MAAM,IAAIS,EAAS,4BAA6B,GAAG,CAEvD,CACF,CAAC,CAAC,EAGFjB,EAAI,IAAI,CAACc,EAAKC,EAAKG,IAAS,CAC1BJ,EAAI,WAAWN,EAAiB,OAAO,QAAS,IAAM,CACpDO,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,kBACP,QAAS,kCACX,CAAC,CACH,CAAC,EACDG,EAAK,CACP,CAAC,EAIDlB,EAAI,IAAI,EAAAC,QAAQ,OAAO,EAAAJ,QAAK,KAAKD,EAAkB,gBAAgB,EAAG,CACpE,OAAQ,QAAQ,IAAI,WAAa,aAAe,KAAO,IACvD,KAAM,GACN,aAAc,EAChB,CAAC,CAAC,EAIFI,EAAI,IAAI,WAAY,EAAAC,QAAQ,OAAO,YAAa,CAC9C,OAAQ,QAAQ,IAAI,WAAa,aAAe,KAAO,IACvD,KAAM,EACR,CAAC,CAAC,EAGFD,EAAI,IAAI,kBAAmB,EAAAC,QAAQ,OAAO,0BAA0B,CAAC,EACrED,EAAI,IAAI,oBAAqB,EAAAC,QAAQ,OAAO,kBAAkB,CAAC,EAC/DD,EAAI,IAAI,mBAAoB,EAAAC,QAAQ,OAAO,iBAAiB,CAAC,EAI7DD,EAAI,IAAI,cAAemB,EAAkB,EAGzCnB,EAAI,IAAI,UAAW,CAACc,EAAKC,IAAQ,CAC/B,IAAMK,EAAYf,GAAc,mBAAmB,EAC/Ce,GAAaA,EAAU,SAAW,UACpCL,EAAI,OAAO,GAAG,EAAE,KAAK,IAAI,EAEzBA,EAAI,OAAO,GAAG,EAAE,KAAK,qBAAqB,CAE9C,CAAC,EAGDf,EAAI,IAAI,cAAe,CAACc,EAAKC,IAAQ,CACnCA,EAAI,KAAK,CACP,QAAS,6BACT,QAAS,QACT,YAAa,QAAQ,IAAI,UAAY,aACvC,CAAC,CACH,CAAC,EASDf,EAAI,IAAI,qBAAsB,CAACc,EAAKC,IAAQ,CAC1CA,EAAI,KAAK,CACP,eAAgB,QAAQ,IAAI,uBAC5B,QAAS,EACX,CAAC,CACH,CAAC,EAKDf,EAAI,KAAK,oCAAqC,MAAOc,EAAKC,IAAQ,CAChE,GAAI,CACF,GAAM,CAAE,OAAAM,EAAQ,SAAAC,EAAW,MAAO,OAAAC,EAAQ,SAAAC,CAAS,EAAIV,EAAI,KAE3D,GAAI,CAACO,GAAU,CAACE,EACd,OAAOR,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,gCAAiC,CAAC,EAGzE,IAAMU,EAAgB,MAAM3B,GAAO,eAAe,OAAO,CACvD,OAAQ,KAAK,MAAMuB,CAAM,EACzB,SAAAC,EACA,SAAU,CACR,OAAAC,EACA,SAAUC,GAAY,UACxB,EACA,0BAA2B,CACzB,QAAS,EACX,CACF,CAAC,EAEDT,EAAI,KAAK,CACP,aAAcU,EAAc,cAC5B,QAAS,EACX,CAAC,CACH,OAASC,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,EACtDX,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,4BACP,QAASW,EAAM,OACjB,CAAC,CACH,CACF,CAAC,EAGD1B,EAAI,KAAK,kBAAmB,EAAAC,QAAQ,IAAI,CAAE,KAAM,kBAAmB,CAAC,EAAG,CAACa,EAAKC,IAAQ,CACnF,IAAMY,EAAMb,EAAI,QAAQ,kBAAkB,EACpCc,EAAgB,QAAQ,IAAI,sBAE9BC,EAEJ,GAAI,CACFA,EAAQ/B,GAAO,SAAS,eAAegB,EAAI,KAAMa,EAAKC,CAAa,CACrE,OAASE,EAAK,CACZ,eAAQ,MAAM,yCAA0CA,EAAI,OAAO,EAC5Df,EAAI,OAAO,GAAG,EAAE,KAAK,kBAAkBe,EAAI,OAAO,EAAE,CAC7D,CAGA,OAAQD,EAAM,KAAM,CAClB,IAAK,2BACH,IAAMJ,EAAgBI,EAAM,KAAK,OACjC,QAAQ,IAAI,qBAAsBJ,EAAc,EAAE,EAElD,MACF,IAAK,gCACH,QAAQ,IAAI,kBAAmBI,EAAM,KAAK,OAAO,EAAE,EAEnD,MACF,QACE,QAAQ,IAAI,yBAAyBA,EAAM,IAAI,EAAE,CACrD,CAEAd,EAAI,KAAK,CAAE,SAAU,EAAK,CAAC,CAC7B,CAAC,EAGDf,EAAI,IAAI,oBAAqB,CAACc,EAAKC,IAAQ,CACzCA,EAAI,KAAK,CACP,MAAO,CACL,CACE,GAAI,QACJ,KAAM,aACN,MAAO,IACP,MAAO,GACP,SAAU,CAAC,sBAAuB,kBAAkB,CACtD,EACA,CACE,GAAI,MACJ,KAAM,WACN,MAAO,IACP,MAAO,GACP,SAAU,CAAC,cAAe,eAAgB,eAAe,CAC3D,EACA,CACE,GAAI,UACJ,KAAM,eACN,MAAO,IACP,MAAO,YACP,SAAU,CAAC,eAAgB,mBAAoB,oBAAoB,CACrE,CACF,CACF,CAAC,CACH,CAAC,EAGDf,EAAI,IAAI,IAAK,CAACc,EAAKC,IAAQ,CACzBA,EAAI,SAAS,EAAAlB,QAAK,KAAKD,EAAkB,iBAAkB,YAAY,CAAC,CAC1E,CAAC,EASDI,EAAI,KAAK,qBAAsB,MAAOc,EAAKC,IAAQ,CACjD,GAAI,CACF,GAAM,CAAE,MAAAgB,EAAO,MAAAC,EAAO,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,YAAAC,CAAY,EAAItB,EAAI,KAIlE,GAAI,CAACiB,GAAS,CAACC,GAAS,CAACC,GAAS,CAACC,EACjC,OAAOnB,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,qDACT,CAAC,EAKH,IAAMsB,EAAS,MAAMlC,EAAY,aAAa,CAC5C,MAAA4B,EACA,MAAAC,EACA,MAAAC,EACA,MAAO,SAASC,CAAK,EACrB,SAAUC,EAAW,SAASA,CAAQ,EAAI,OAC1C,YAAa,EAAQC,CACvB,CAAC,EAEGC,EAAO,QACTtB,EAAI,KAAK,CACP,QAAS,GACT,SAAUsB,EAAO,SACjB,aAAcA,EAAO,aACrB,QAAS,6BACX,CAAC,EAEDtB,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,QAAS,GACT,MAAOsB,EAAO,KAChB,CAAC,CAEL,OAASX,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,2BAA2BW,CAAK,EACzC,CAAC,CACH,CACF,CAAC,EAED1B,EAAI,IAAI,iBAAkB,MAAOc,EAAKC,IAAQ,CAC5C,GAAI,CACF,IAAMuB,EAAY,MAAMnC,EAAY,kBAAkB,EACtDY,EAAI,KAAK,CAAE,MAAOuB,CAAU,CAAC,CAC/B,OAASZ,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,8BAA8BW,CAAK,EAAG,CAAC,CACvE,CACF,CAAC,EAED1B,EAAI,IAAI,+BAAgC,MAAOc,EAAKC,IAAQ,CAC1D,GAAI,CACF,IAAMwB,EAAWzB,EAAI,OAAO,SACtB0B,KAAW,SAAK,2BAA4BD,CAAQ,EACpDE,EAAW,MAAMtC,EAAY,gBAAgBqC,CAAQ,EAEvDC,EACF1B,EAAI,KAAK0B,CAAQ,EAEjB1B,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,oBAAqB,CAAC,CAExD,OAASW,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,2BAA2BW,CAAK,EAAG,CAAC,CACpE,CACF,CAAC,EASD1B,EAAI,KAAK,mBAAoB,MAAOc,EAAKC,IAAQ,CAC/C,GAAI,CACF,GAAM,CAAE,UAAA2B,EAAW,KAAAC,EAAM,QAAAC,CAAQ,EAAI9B,EAAI,KAGzC,GAAI,CAAC4B,GAAa,CAACC,EACjB,OAAO5B,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,oDACT,CAAC,EAMH,IAAMsB,EAAS,CACb,QAAS,GACT,QAAS,OAAO,KAAK,IAAI,CAAC,GAC1B,SAAU,0BAA0B,KAAK,IAAI,CAAC,OAC9C,QAAS,uCACX,EAEAtB,EAAI,KAAKsB,CAAM,CACjB,OAASX,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,yBAAyBW,CAAK,EACvC,CAAC,CACH,CACF,CAAC,EAED1B,EAAI,KAAK,wBAAyB,MAAOc,EAAKC,IAAQ,CACpD,GAAI,CACF,GAAM,CAAE,KAAA4B,EAAM,QAAAC,EAAS,SAAAJ,CAAS,EAAI1B,EAAI,KAExC,GAAI,CAAC6B,GAAQ,CAACC,EACZ,OAAO7B,EAAI,OAAO,GAAG,EAAE,KAAK,CAC1B,MAAO,8CACT,CAAC,EAIH,IAAMsB,EAAS,CACb,QAAS,GACT,SAAU,+BAA+B,KAAK,IAAI,CAAC,OACnD,gBAAiB,EAAAG,EACjB,QAAS,gCACX,EAEAzB,EAAI,KAAKsB,CAAM,CACjB,OAASX,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,2BAA2BW,CAAK,EACzC,CAAC,CACH,CACF,CAAC,EAID1B,EAAI,IAAI,EAAAC,QAAQ,KAAK,CAAE,MAAO,MAAO,CAAC,CAAC,EACvCD,EAAI,IAAI,EAAAC,QAAQ,WAAW,CAAE,SAAU,GAAM,MAAO,MAAO,CAAC,CAAC,EAC7DD,EAAI,OAAI,EAAAa,SAAK,CACX,OAAQ,QAAQ,IAAI,WAAa,aAC/B,CAAC,gCAAiC,gCAAgC,EAClE,CAAC,wBAAyB,uBAAuB,EACnD,YAAa,EACf,CAAC,CAAC,EAGFb,EAAI,IAAI,WAAY,EAAAC,QAAQ,OAAO,EAAAJ,QAAK,KAAK,UAAW,YAAY,CAAC,CAAC,EAWtEG,EAAI,IAAI,aAAc6C,EAAW,EACjC7C,EAAI,IAAI,YAAa8C,EAAU,EAC/B9C,EAAI,IAAI,iBAAkB+C,EAAe,EAGzC/C,EAAI,KAAK,8BAA+B,MAAOc,EAAKC,IAAQ,CAC1D,GAAI,CACF,GAAM,CACJ,MAAAgB,EACA,MAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,OAAAa,EACA,QAAAJ,EACA,MAAAK,EACA,cAAAC,CACF,EAAIpC,EAAI,KAEFqC,EAAS,QAAQ,KAAK,IAAI,CAAC,GAC7Bd,EAAc,CAChB,GAAIc,EACJ,MAAApB,EACA,MAAAE,EACA,MAAAC,EACA,WAAY,CAAC,EACb,OAAQ,YACV,EAGA,QAAQ,IAAI,oCAA6B,EACzC,IAAMkB,EAAa,MAAMjD,EAAY,aAAa,CAChD,MAAA4B,EACA,MAAAC,EACA,MAAAC,EACA,MAAO,SAASC,CAAK,EACrB,SAAUC,EAAW,SAASA,CAAQ,EAAI,OAC1C,YAAa,EAAQa,CACvB,CAAC,EAWD,GATII,EAAW,UACbf,EAAO,WAAW,KAAO,CACvB,KAAMe,EAAW,SACjB,SAAUA,EAAW,YACvB,EACA,QAAQ,IAAI,oCAA+B,GAIzCH,EAAO,CACT,QAAQ,IAAI,kCAA2B,EACvC,GAAI,CACF,IAAMI,EAAW,GAAGpB,CAAK,WAAWD,CAAK,KAAKE,CAAK,2BAEnDG,EAAO,WAAW,QAAU,CAC1B,KAAM,+BAA+Bc,CAAM,OAC3C,OAAQE,CACV,EACA,QAAQ,IAAI,2BAAsB,CACpC,OAAS3B,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,CACpD,CACF,CAGA,GAAIwB,GAAiBF,EAAQ,CAC3B,QAAQ,IAAI,gCAAyB,EACrC,GAAI,CAEFX,EAAO,WAAW,OAAS,CACzB,KAAM,0BAA0Bc,CAAM,OACtC,OAAQH,EACR,QAASJ,GAAW,SACtB,EACA,QAAQ,IAAI,yBAAoB,CAClC,OAASlB,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,CACjD,CACF,CAEAW,EAAO,OAAS,YAChBA,EAAO,UAAY,IAAI,KAAK,EAAE,YAAY,EAE1CtB,EAAI,KAAK,CACP,QAAS,GACT,KAAMsB,EACN,QAAS,sCACX,CAAC,CAEH,OAASX,EAAO,CACd,QAAQ,MAAM,mCAAoCA,CAAK,EACvDX,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,QAAS,GACT,MAAO,oCAAoCW,EAAM,OAAO,EAC1D,CAAC,CACH,CACF,CAAC,EAGD1B,EAAI,IAAI,qBAAsB,MAAOc,EAAKC,IAAQ,CAChD,GAAI,CAEF,IAAMuC,EAAU,CACd,MAAO,CAAC,EACR,KAAM,MAAMnD,EAAY,kBAAkB,EAC1C,OAAQ,CAAC,EACT,QAAS,CAAC,CACZ,EAEAY,EAAI,KAAKuC,CAAO,CAClB,OAAS5B,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,0BAA0BW,EAAM,OAAO,EAAG,CAAC,CAC3E,CACF,CAAC,EAGD1B,EAAI,IAAIuD,EAAY,EAEpBvD,EAAI,KAAK,qBAAsB,MAAOc,EAAKC,IAAQ,CACjD,GAAI,CACF,GAAM,CAAE,OAAAiC,EAAQ,MAAAf,EAAO,MAAAC,EAAO,YAAAsB,EAAa,MAAAP,CAAM,EAAInC,EAAI,KAGnD,CAAE,MAAA2C,CAAM,EAAI,QAAQ,eAAe,EACnCL,EAAa,MAAM,IAAI,QAAQ,CAACM,EAASC,IAAW,CACxD,IAAMC,EAAcH,EAAM,UAAW,CACnC,oCACA,WAAYT,EACZ,UAAWf,EACX,UAAWC,EAAM,SAAS,CAC5B,CAAC,EAEG2B,EAAS,GACbD,EAAY,OAAO,GAAG,OAASE,GAAS,CACtCD,GAAUC,EAAK,SAAS,CAC1B,CAAC,EAEDF,EAAY,GAAG,QAAUG,GAAS,CAC5BA,IAAS,EACXL,EAAQ,KAAK,MAAMG,CAAM,CAAC,EAE1BF,EAAO,IAAI,MAAM,wBAAwB,CAAC,CAE9C,CAAC,CACH,CAAC,EAGGK,EAAc,KACdR,IAEFQ,EAAc,MADK,IAAI,WAAW,EACH,WAAWR,EAAaR,CAAM,GAI/D,IAAIiB,EAAgB,KAChBhB,IAEFgB,EAAgB,MADS,IAAI,iBAAiB,EACP,cACrC,GAAGhC,CAAK,sBAAsBe,CAAM,GACpC,EACF,GAGF,IAAMkB,EAAW,CACf,GAAI,KAAK,IAAI,EAAE,SAAS,EACxB,OAAAlB,EACA,MAAAf,EACA,MAAAC,EACA,SAAUkB,EAAW,SACrB,UAAWY,GAAa,UACxB,YAAaC,GAAe,UAC5B,OAAQ,YACR,UAAW,IAAI,KAAK,EAAE,YAAY,CACpC,EAEAlD,EAAI,KAAKmD,CAAQ,CACnB,OAASxC,EAAO,CACdX,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,2BAA2BW,EAAM,OAAO,EAAG,CAAC,CAC5E,CACF,CAAC,EAGD,IAAMyC,EAASnE,EAAI,OAAOE,EAAM,UAAW,IAAM,CAC/C,QAAQ,IAAI,0DAAmDA,CAAI,EAAE,EACrE,QAAQ,IAAI,qCAA8B,EAC1C,QAAQ,IAAI,sDAA0C,EACtD,QAAQ,IAAI,gBAAgB,QAAQ,IAAI,UAAY,aAAa,EAAE,EACnE,QAAQ,IAAI,uCAA2B,QAAQ,IAAI,WAAa,aAAe,UAAY,UAAU,EAAE,EACvG,QAAQ,IAAI,kCAA2B,QAAQ,IAAI,WAAa,aAAe,SAAW,UAAU,EAAE,CACxG,CAAC,EAGG,QAAQ,IAAI,WAAa,eAC3BiE,EAAO,WAAW3D,EAAiB,OAAO,OAAO,EACjD2D,EAAO,iBAAmB3D,EAAiB,OAAO,iBAClD2D,EAAO,eAAiB3D,EAAiB,OAAO,gBAIlDH,GAAc,0BAA0B,EAIxCL,EAAI,IAAI,IAAK,CAACc,EAAKC,IAAQ,CAEzB,GAAID,EAAI,KAAK,WAAW,OAAO,GAAKA,EAAI,KAAK,WAAW,WAAW,EACjE,OAAOC,EAAI,OAAO,GAAG,EAAE,KAAK,CAAE,MAAO,WAAY,CAAC,EAIpDA,EAAI,SAAS,EAAAlB,QAAK,KAAKD,EAAkB,2BAA2B,CAAC,CACvE,CAAC,EAGD,IAAMwE,GAAmB,IAAIC,GAAiBF,CAAM,EAGpDA,EAAO,GAAG,QAAUzC,GAAe,CACjC,QAAQ,MAAM,yBAA0BA,CAAK,EAEzCA,EAAM,OAAS,eACjB,QAAQ,MAAM,iBAAiBxB,CAAI,oBAAoB,EACvD,QAAQ,KAAK,CAAC,GAGZwB,EAAM,OAAS,WACjB,QAAQ,MAAM,8CAA8CxB,CAAI,EAAE,EAClE,QAAQ,KAAK,CAAC,EAElB,CAAC,EAEDiE,EAAO,GAAG,cAAe,CAACzC,EAAY4C,IAAgB,CACpD,QAAQ,MAAM,yBAA0B5C,CAAK,EAC7C4C,EAAO,IAAI;AAAA;AAAA,CAAkC,CAC/C,CAAC,EAED,IAAOC,GAAQvE",
  "names": ["index_exports", "__export", "index_default", "__toCommonJS", "import_express", "import_cors", "import_path", "import_url", "import_dotenv", "import_stripe", "import_helmet", "import_express_rate_limit", "import_child_process", "import_fs", "import_path", "MidiService", "request", "fs", "timestamp", "sanitizedTitle", "outputPath", "path", "enhancedArgs", "result", "midiExists", "metadataPath", "metadataExists", "error", "args", "resolve", "childProcess", "stderr", "stdout", "data", "code", "filePath", "file", "midiPath", "metadata", "templateName", "customizations", "templatePath", "baseName", "style", "minTempo", "maxTempo", "category", "tempoRange", "chordSetName", "chordSetPath", "import_zod", "AppError", "message", "status", "isOperational", "errorHandler", "error", "req", "res", "next", "requestId", "generateRequestId", "errorResponse", "e", "generateRequestId", "requestLogger", "req", "res", "next", "requestId", "generateRequestId", "startTime", "requestLog", "originalSend", "body", "responseTime", "logLevel", "healthCheckLogger", "import_promises", "import_path", "HealthChecker", "_HealthChecker", "startTime", "database", "filesystem", "memory", "stripe", "storage", "services", "overallStatus", "healthStatus", "responseTime", "error", "errorStatus", "start", "resolve", "testDir", "fs", "testFile", "path", "usage", "directories", "dir", "result", "statuses", "s", "healthCheckHandler", "req", "res", "healthChecker", "health", "statusCode", "health_check_default", "serverConfig", "productionConfig", "serverConfig", "resourceMonitor", "usage", "threshold", "memory", "production_default", "GracefulShutdown", "server", "health_check_default", "error", "reason", "promise", "warning", "signal", "resolve", "checkConnections", "connections", "fs", "tempDir", "files", "file", "graceful_shutdown_default", "import_express", "import_path", "import_promises", "import_multer", "import_child_process", "router", "upload", "multer", "path", "req", "file", "cb", "res", "voiceId", "audioFile", "result", "executeRVCScript", "fs", "error", "text", "style", "sanitizedText", "epochs", "audioFiles", "trainingDir", "trainingFiles", "destPath", "trainingId", "startTrainingProcess", "statusFile", "statusData", "status", "args", "resolve", "reject", "scriptPath", "pythonProcess", "stdout", "stderr", "data", "code", "voice_default", "import_express", "import_path", "router", "midiService", "MidiService", "req", "res", "title", "theme", "genre", "tempo", "duration", "useAiLyrics", "result", "error", "midiFiles", "filename", "midiPath", "path", "metadata", "style", "grooves", "minTempo", "maxTempo", "midi_default", "import_express", "import_child_process", "import_fs", "import_path", "AudioLDM2Service", "path", "fs", "error", "prompt", "config", "outputFileName", "outputPath", "scriptPath", "result", "scriptContent", "resolve", "process", "stdout", "stderr", "data", "code", "timestamp", "outputDir", "modelsDir", "entry", "filePath", "import_path", "import_promises", "import_multer", "router", "audioldm2Service", "AudioLDM2Service", "upload", "multer", "path", "req", "res", "prompt", "instanceWord", "objectClass", "audioLength", "outputDir", "fs", "config", "audioFile", "error", "maxTrainSteps", "trainingDir", "files", "file", "destPath", "modelPath", "models", "trainingId", "modelDir", "audioldm2_default", "import_meta", "dotenv", "__filename_compat", "__dirname_compat", "path", "stripe", "Stripe", "app", "express", "PORT", "midiService", "MidiService", "healthChecker", "HealthChecker", "helmet", "production_default", "limiter", "rateLimit", "resourceMonitor", "healthCheckLogger", "cors", "req", "res", "buf", "AppError", "next", "healthCheckHandler", "lastCheck", "amount", "currency", "userId", "planType", "paymentIntent", "error", "sig", "webhookSecret", "event", "err", "title", "theme", "genre", "tempo", "duration", "useAiLyrics", "result", "midiFiles", "filename", "midiPath", "metadata", "audioPath", "text", "voiceId", "voice_default", "midi_default", "audioldm2_default", "lyrics", "useAI", "includeVocals", "songId", "midiResult", "aiPrompt", "library", "errorHandler", "voiceSample", "spawn", "resolve", "reject", "midiProcess", "output", "data", "code", "vocalResult", "aiMusicResult", "songData", "server", "gracefulShutdown", "graceful_shutdown_default", "socket", "index_default"]
}
