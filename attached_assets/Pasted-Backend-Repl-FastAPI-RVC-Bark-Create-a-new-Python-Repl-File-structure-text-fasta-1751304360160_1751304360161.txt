Backend Repl (FastAPI + RVC/Bark)
Create a new Python Repl

File structure:

:

text

fastapi>=0.95.2
uvicorn>=0.22.0
python-multipart>=0.0.6
numpy>=1.24.3
soundfile>=0.12.1
(simplified for Replit):
python

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import uuid
from pathlib import Path
import numpy as np
import soundfile as sf
from fastapi.staticfiles import StaticFiles

app = FastAPI()

# Allow CORS for Replit frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock voice engine (replace with actual RVC/Bark implementation)
class VoiceEngine:
    def create_voice_embedding(self, audio_path: str, voice_id: str) -> str:
        os.makedirs("embeddings", exist_ok=True)
        embedding_path = f"embeddings/{voice_id}.npy"
        np.save(embedding_path, np.random.rand(256))  # Mock embedding
        return embedding_path
    
    def synthesize(self, text: str, voice_id: str = None) -> str:
        os.makedirs("outputs", exist_ok=True)
        output_path = f"outputs/{uuid.uuid4()}.wav"
        # Generate silent audio as mock (replace with real synthesis)
        sf.write(output_path, np.zeros(16000), 16000)
        return output_path

engine = VoiceEngine()

@app.post("/register-voice")
async def register_voice(file: UploadFile = File(...)):
    try:
        voice_id = str(uuid.uuid4())
        os.makedirs("voices", exist_ok=True)
        file_path = f"voices/{voice_id}.wav"
        
        with open(file_path, "wb") as buffer:
            buffer.write(await file.read())
        
        embedding_path = engine.create_voice_embedding(file_path, voice_id)
        return {"voice_id": voice_id, "embedding_path": embedding_path}
    
    except Exception as e:
        raise HTTPException(500, str(e))

@app.post("/synthesize")
async def synthesize(text: str, voice_id: str = None):
    try:
        output_path = engine.synthesize(text, voice_id)
        return {"audio_url": f"/outputs/{Path(output_path).name}"}
    except Exception as e:
        raise HTTPException(500, str(e))

# Serve static files (audio outputs)
app.mount("/outputs", StaticFiles(directory="outputs"), name="outputs")

# For Replit deployment
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)